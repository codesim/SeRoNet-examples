//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_BatteryStateCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Sensor_msgs_BatteryStateACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Sensor_msgs_BatteryStateCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Sensor_msgs_BatteryStateCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_BatteryState.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
	}
	
	void Sensor_msgs_BatteryStateCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Sensor_msgs_BatteryStateCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_BatteryState.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Sensor_msgs_BatteryStateCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		boost::hash_combine(seed, data.voltage);
		boost::hash_combine(seed, data.current);
		boost::hash_combine(seed, data.charge);
		boost::hash_combine(seed, data.capacity);
		boost::hash_combine(seed, data.design_capacity);
		boost::hash_combine(seed, data.percentage);
		boost::hash_combine(seed, data.power_supply_status);
		boost::hash_combine(seed, data.power_supply_health);
		boost::hash_combine(seed, data.power_supply_technology);
		boost::hash_combine(seed, data.present);
		std::vector<ACE_CDR::Float>::const_iterator data_cell_voltageIt;
		for(data_cell_voltageIt=data.cell_voltage.begin(); data_cell_voltageIt!=data.cell_voltage.end(); data_cell_voltageIt++) {
			boost::hash_combine(seed, *data_cell_voltageIt);
		}
		boost::hash_combine(seed, std::string(data.location.c_str()));
		boost::hash_combine(seed, std::string(data.serial_number.c_str()));
		
		return seed;
	}
	#endif
	
	// default constructor
	Sensor_msgs_BatteryStateCore::Sensor_msgs_BatteryStateCore()
	:	idl_Sensor_msgs_BatteryState()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setVoltage(0.0);
		setCurrent(0.0);
		setCharge(0.0);
		setCapacity(0.0);
		setDesign_capacity(0.0);
		setPercentage(0.0);
		setPower_supply_status(0);
		setPower_supply_health(0);
		setPower_supply_technology(0);
		setPresent(false);
		setCell_voltage(std::vector<float>());
		setLocation("");
		setSerial_number("");
	}
	
	Sensor_msgs_BatteryStateCore::Sensor_msgs_BatteryStateCore(const DATATYPE &data)
	:	idl_Sensor_msgs_BatteryState(data)
	{  }

	Sensor_msgs_BatteryStateCore::~Sensor_msgs_BatteryStateCore()
	{  }
	
	void Sensor_msgs_BatteryStateCore::to_ostream(std::ostream &os) const
	{
	  os << "Sensor_msgs_BatteryState(";
	  getHeader().to_ostream(os);
	  os << getVoltage() << " ";
	  os << getCurrent() << " ";
	  os << getCharge() << " ";
	  os << getCapacity() << " ";
	  os << getDesign_capacity() << " ";
	  os << getPercentage() << " ";
	  os << getPower_supply_status() << " ";
	  os << getPower_supply_health() << " ";
	  os << getPower_supply_technology() << " ";
	  os << getPresent() << " ";
	  std::vector<float>::const_iterator cell_voltageIt;
	  std::vector<float> cell_voltageList = getCell_voltageCopy();
	  for(cell_voltageIt=cell_voltageList.begin(); cell_voltageIt!=cell_voltageList.end(); cell_voltageIt++) {
	  	os << *cell_voltageIt << " ";
	  }
	  os << getLocation() << " ";
	  os << getSerial_number() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void Sensor_msgs_BatteryStateCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		os << indent << "<voltage>" << getVoltage() << "</voltage>";
		os << indent << "<current>" << getCurrent() << "</current>";
		os << indent << "<charge>" << getCharge() << "</charge>";
		os << indent << "<capacity>" << getCapacity() << "</capacity>";
		os << indent << "<design_capacity>" << getDesign_capacity() << "</design_capacity>";
		os << indent << "<percentage>" << getPercentage() << "</percentage>";
		os << indent << "<power_supply_status>" << getPower_supply_status() << "</power_supply_status>";
		os << indent << "<power_supply_health>" << getPower_supply_health() << "</power_supply_health>";
		os << indent << "<power_supply_technology>" << getPower_supply_technology() << "</power_supply_technology>";
		os << indent << "<present>" << getPresent() << "</present>";
		std::vector<float>::const_iterator cell_voltageIt;
		std::vector<float> cell_voltageList = getCell_voltageCopy();
		counter = 0;
		os << indent << "<cell_voltageList n=\"" << cell_voltageList.size() << "\">";
		for(cell_voltageIt=cell_voltageList.begin(); cell_voltageIt!=cell_voltageList.end(); cell_voltageIt++) {
			os << indent << "<cell_voltage i=\"" << counter++ << "\">" << *cell_voltageIt << "</cell_voltage>";
		}
		os << indent << "</cell_voltageList>";
		os << indent << "<location>" << getLocation() << "</location>";
		os << indent << "<serial_number>" << getSerial_number() << "</serial_number>";
	}
	
	// restore from xml stream
	void Sensor_msgs_BatteryStateCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_voltage("<voltage>");
		static const Smart::KnuthMorrisPratt kmp_current("<current>");
		static const Smart::KnuthMorrisPratt kmp_charge("<charge>");
		static const Smart::KnuthMorrisPratt kmp_capacity("<capacity>");
		static const Smart::KnuthMorrisPratt kmp_design_capacity("<design_capacity>");
		static const Smart::KnuthMorrisPratt kmp_percentage("<percentage>");
		static const Smart::KnuthMorrisPratt kmp_power_supply_status("<power_supply_status>");
		static const Smart::KnuthMorrisPratt kmp_power_supply_health("<power_supply_health>");
		static const Smart::KnuthMorrisPratt kmp_power_supply_technology("<power_supply_technology>");
		static const Smart::KnuthMorrisPratt kmp_present("<present>");
		static const Smart::KnuthMorrisPratt kmp_cell_voltageList("<cell_voltageList n=\"");
		static const Smart::KnuthMorrisPratt kmp_cell_voltage("\">");
		static const Smart::KnuthMorrisPratt kmp_location("<location>");
		static const Smart::KnuthMorrisPratt kmp_serial_number("<serial_number>");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_voltage.search(is)) {
			float voltageItem;
			is >> voltageItem;
			setVoltage(voltageItem);
		}
		if(kmp_current.search(is)) {
			float currentItem;
			is >> currentItem;
			setCurrent(currentItem);
		}
		if(kmp_charge.search(is)) {
			float chargeItem;
			is >> chargeItem;
			setCharge(chargeItem);
		}
		if(kmp_capacity.search(is)) {
			float capacityItem;
			is >> capacityItem;
			setCapacity(capacityItem);
		}
		if(kmp_design_capacity.search(is)) {
			float design_capacityItem;
			is >> design_capacityItem;
			setDesign_capacity(design_capacityItem);
		}
		if(kmp_percentage.search(is)) {
			float percentageItem;
			is >> percentageItem;
			setPercentage(percentageItem);
		}
		if(kmp_power_supply_status.search(is)) {
			unsigned char power_supply_statusItem;
			is >> power_supply_statusItem;
			setPower_supply_status(power_supply_statusItem);
		}
		if(kmp_power_supply_health.search(is)) {
			unsigned char power_supply_healthItem;
			is >> power_supply_healthItem;
			setPower_supply_health(power_supply_healthItem);
		}
		if(kmp_power_supply_technology.search(is)) {
			unsigned char power_supply_technologyItem;
			is >> power_supply_technologyItem;
			setPower_supply_technology(power_supply_technologyItem);
		}
		if(kmp_present.search(is)) {
			bool presentItem;
			is >> presentItem;
			setPresent(presentItem);
		}
		if(kmp_cell_voltageList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			float cell_voltageItem;
			std::vector<float> cell_voltageList;
			kmp_cell_voltage.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_cell_voltage.search(is)) {
					is >> cell_voltageItem;
					cell_voltageList.push_back(cell_voltageItem);
				}
			}
			setCell_voltage(cell_voltageList);
		}
		if(kmp_location.search(is)) {
			std::string locationItem;
			is >> locationItem;
			setLocation(locationItem);
		}
		if(kmp_serial_number.search(is)) {
			std::string serial_numberItem;
			is >> serial_numberItem;
			setSerial_number(serial_numberItem);
		}
	}
	
	/*
	void Sensor_msgs_BatteryStateCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Sensor_msgs_BatteryStateACE.hh)
		cdr << idl_Sensor_msgs_BatteryState;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Sensor_msgs_BatteryState);
		cdr << data_hash;
		// std::cout << "Sensor_msgs_BatteryStateCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Sensor_msgs_BatteryStateCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Sensor_msgs_BatteryStateACE.hh)
		cdr >> idl_Sensor_msgs_BatteryState;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Sensor_msgs_BatteryState);
		assert(data_hash == own_hash);
		// std::cout << "Sensor_msgs_BatteryStateCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
