//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Trajectory_msgs_JointTrajectoryPointCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Trajectory_msgs_JointTrajectoryPointACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Trajectory_msgs_JointTrajectoryPointCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Trajectory_msgs_JointTrajectoryPointCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for CommBasicObjects::CommTimeStamp(idl_Trajectory_msgs_JointTrajectoryPoint.time_from_start)
		CommBasicObjects::CommTimeStamp::getAllHashValues(hashes);
	}
	
	void Trajectory_msgs_JointTrajectoryPointCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Trajectory_msgs_JointTrajectoryPointCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for CommBasicObjects::CommTimeStamp(idl_Trajectory_msgs_JointTrajectoryPoint.time_from_start)
		CommBasicObjects::CommTimeStamp::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Trajectory_msgs_JointTrajectoryPointCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		std::vector<ACE_CDR::Double>::const_iterator data_positionsIt;
		for(data_positionsIt=data.positions.begin(); data_positionsIt!=data.positions.end(); data_positionsIt++) {
			boost::hash_combine(seed, *data_positionsIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_velocitiesIt;
		for(data_velocitiesIt=data.velocities.begin(); data_velocitiesIt!=data.velocities.end(); data_velocitiesIt++) {
			boost::hash_combine(seed, *data_velocitiesIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_accelerationsIt;
		for(data_accelerationsIt=data.accelerations.begin(); data_accelerationsIt!=data.accelerations.end(); data_accelerationsIt++) {
			boost::hash_combine(seed, *data_accelerationsIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_effortIt;
		for(data_effortIt=data.effort.begin(); data_effortIt!=data.effort.end(); data_effortIt++) {
			boost::hash_combine(seed, *data_effortIt);
		}
		seed += CommBasicObjects::CommTimeStamp::generateDataHash(data.time_from_start);
		
		return seed;
	}
	#endif
	
	// default constructor
	Trajectory_msgs_JointTrajectoryPointCore::Trajectory_msgs_JointTrajectoryPointCore()
	:	idl_Trajectory_msgs_JointTrajectoryPoint()
	{  
		setPositions(std::vector<double>());
		setVelocities(std::vector<double>());
		setAccelerations(std::vector<double>());
		setEffort(std::vector<double>());
		setTime_from_start(CommBasicObjects::CommTimeStamp());
	}
	
	Trajectory_msgs_JointTrajectoryPointCore::Trajectory_msgs_JointTrajectoryPointCore(const DATATYPE &data)
	:	idl_Trajectory_msgs_JointTrajectoryPoint(data)
	{  }

	Trajectory_msgs_JointTrajectoryPointCore::~Trajectory_msgs_JointTrajectoryPointCore()
	{  }
	
	void Trajectory_msgs_JointTrajectoryPointCore::to_ostream(std::ostream &os) const
	{
	  os << "Trajectory_msgs_JointTrajectoryPoint(";
	  std::vector<double>::const_iterator positionsIt;
	  std::vector<double> positionsList = getPositionsCopy();
	  for(positionsIt=positionsList.begin(); positionsIt!=positionsList.end(); positionsIt++) {
	  	os << *positionsIt << " ";
	  }
	  std::vector<double>::const_iterator velocitiesIt;
	  std::vector<double> velocitiesList = getVelocitiesCopy();
	  for(velocitiesIt=velocitiesList.begin(); velocitiesIt!=velocitiesList.end(); velocitiesIt++) {
	  	os << *velocitiesIt << " ";
	  }
	  std::vector<double>::const_iterator accelerationsIt;
	  std::vector<double> accelerationsList = getAccelerationsCopy();
	  for(accelerationsIt=accelerationsList.begin(); accelerationsIt!=accelerationsList.end(); accelerationsIt++) {
	  	os << *accelerationsIt << " ";
	  }
	  std::vector<double>::const_iterator effortIt;
	  std::vector<double> effortList = getEffortCopy();
	  for(effortIt=effortList.begin(); effortIt!=effortList.end(); effortIt++) {
	  	os << *effortIt << " ";
	  }
	  getTime_from_start().to_ostream(os);
	  os << ") ";
	}
	
	// convert to xml stream
	void Trajectory_msgs_JointTrajectoryPointCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		std::vector<double>::const_iterator positionsIt;
		std::vector<double> positionsList = getPositionsCopy();
		counter = 0;
		os << indent << "<positionsList n=\"" << positionsList.size() << "\">";
		for(positionsIt=positionsList.begin(); positionsIt!=positionsList.end(); positionsIt++) {
			os << indent << "<positions i=\"" << counter++ << "\">" << *positionsIt << "</positions>";
		}
		os << indent << "</positionsList>";
		std::vector<double>::const_iterator velocitiesIt;
		std::vector<double> velocitiesList = getVelocitiesCopy();
		counter = 0;
		os << indent << "<velocitiesList n=\"" << velocitiesList.size() << "\">";
		for(velocitiesIt=velocitiesList.begin(); velocitiesIt!=velocitiesList.end(); velocitiesIt++) {
			os << indent << "<velocities i=\"" << counter++ << "\">" << *velocitiesIt << "</velocities>";
		}
		os << indent << "</velocitiesList>";
		std::vector<double>::const_iterator accelerationsIt;
		std::vector<double> accelerationsList = getAccelerationsCopy();
		counter = 0;
		os << indent << "<accelerationsList n=\"" << accelerationsList.size() << "\">";
		for(accelerationsIt=accelerationsList.begin(); accelerationsIt!=accelerationsList.end(); accelerationsIt++) {
			os << indent << "<accelerations i=\"" << counter++ << "\">" << *accelerationsIt << "</accelerations>";
		}
		os << indent << "</accelerationsList>";
		std::vector<double>::const_iterator effortIt;
		std::vector<double> effortList = getEffortCopy();
		counter = 0;
		os << indent << "<effortList n=\"" << effortList.size() << "\">";
		for(effortIt=effortList.begin(); effortIt!=effortList.end(); effortIt++) {
			os << indent << "<effort i=\"" << counter++ << "\">" << *effortIt << "</effort>";
		}
		os << indent << "</effortList>";
		os << indent << "<time_from_start>";
		getTime_from_start().to_xml(os, indent);
		os << indent << "</time_from_start>";
	}
	
	// restore from xml stream
	void Trajectory_msgs_JointTrajectoryPointCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_positionsList("<positionsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_positions("\">");
		static const Smart::KnuthMorrisPratt kmp_velocitiesList("<velocitiesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_velocities("\">");
		static const Smart::KnuthMorrisPratt kmp_accelerationsList("<accelerationsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_accelerations("\">");
		static const Smart::KnuthMorrisPratt kmp_effortList("<effortList n=\"");
		static const Smart::KnuthMorrisPratt kmp_effort("\">");
		static const Smart::KnuthMorrisPratt kmp_time_from_start("<time_from_start>");
		
		if(kmp_positionsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double positionsItem;
			std::vector<double> positionsList;
			kmp_positions.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_positions.search(is)) {
					is >> positionsItem;
					positionsList.push_back(positionsItem);
				}
			}
			setPositions(positionsList);
		}
		if(kmp_velocitiesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double velocitiesItem;
			std::vector<double> velocitiesList;
			kmp_velocities.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_velocities.search(is)) {
					is >> velocitiesItem;
					velocitiesList.push_back(velocitiesItem);
				}
			}
			setVelocities(velocitiesList);
		}
		if(kmp_accelerationsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double accelerationsItem;
			std::vector<double> accelerationsList;
			kmp_accelerations.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_accelerations.search(is)) {
					is >> accelerationsItem;
					accelerationsList.push_back(accelerationsItem);
				}
			}
			setAccelerations(accelerationsList);
		}
		if(kmp_effortList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double effortItem;
			std::vector<double> effortList;
			kmp_effort.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_effort.search(is)) {
					is >> effortItem;
					effortList.push_back(effortItem);
				}
			}
			setEffort(effortList);
		}
		if(kmp_time_from_start.search(is)) {
			CommBasicObjects::CommTimeStamp time_from_startItem;
			time_from_startItem.from_xml(is);
			setTime_from_start(time_from_startItem);
		}
	}
	
	/*
	void Trajectory_msgs_JointTrajectoryPointCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Trajectory_msgs_JointTrajectoryPointACE.hh)
		cdr << idl_Trajectory_msgs_JointTrajectoryPoint;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Trajectory_msgs_JointTrajectoryPoint);
		cdr << data_hash;
		// std::cout << "Trajectory_msgs_JointTrajectoryPointCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Trajectory_msgs_JointTrajectoryPointCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Trajectory_msgs_JointTrajectoryPointACE.hh)
		cdr >> idl_Trajectory_msgs_JointTrajectoryPoint;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Trajectory_msgs_JointTrajectoryPoint);
		assert(data_hash == own_hash);
		// std::cout << "Trajectory_msgs_JointTrajectoryPointCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
