//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_MultiDOFJointStateCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Sensor_msgs_MultiDOFJointStateACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Sensor_msgs_MultiDOFJointStateCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Sensor_msgs_MultiDOFJointStateCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_MultiDOFJointState.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Transform(idl_Sensor_msgs_MultiDOFJointState.transforms)
		ROSCommon_msgs::Geometry_msgs_Transform::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Twist(idl_Sensor_msgs_MultiDOFJointState.twist)
		ROSCommon_msgs::Geometry_msgs_Twist::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Wrench(idl_Sensor_msgs_MultiDOFJointState.wrench)
		ROSCommon_msgs::Geometry_msgs_Wrench::getAllHashValues(hashes);
	}
	
	void Sensor_msgs_MultiDOFJointStateCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Sensor_msgs_MultiDOFJointStateCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_MultiDOFJointState.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Transform(idl_Sensor_msgs_MultiDOFJointState.transforms)
		ROSCommon_msgs::Geometry_msgs_Transform::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Twist(idl_Sensor_msgs_MultiDOFJointState.twist)
		ROSCommon_msgs::Geometry_msgs_Twist::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Wrench(idl_Sensor_msgs_MultiDOFJointState.wrench)
		ROSCommon_msgs::Geometry_msgs_Wrench::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Sensor_msgs_MultiDOFJointStateCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		std::vector<ACE_CString>::const_iterator data_joint_namesIt;
		for(data_joint_namesIt=data.joint_names.begin(); data_joint_namesIt!=data.joint_names.end(); data_joint_namesIt++) {
			boost::hash_combine(seed, std::string(data_joint_namesIt->c_str()));
		}
		std::vector<ROSCommon_msgsIDL::Geometry_msgs_Transform>::const_iterator data_transformsIt;
		for(data_transformsIt=data.transforms.begin(); data_transformsIt!=data.transforms.end(); data_transformsIt++) {
			seed += ROSCommon_msgs::Geometry_msgs_Transform::generateDataHash(*data_transformsIt);
		}
		std::vector<ROSCommon_msgsIDL::Geometry_msgs_Twist>::const_iterator data_twistIt;
		for(data_twistIt=data.twist.begin(); data_twistIt!=data.twist.end(); data_twistIt++) {
			seed += ROSCommon_msgs::Geometry_msgs_Twist::generateDataHash(*data_twistIt);
		}
		std::vector<ROSCommon_msgsIDL::Geometry_msgs_Wrench>::const_iterator data_wrenchIt;
		for(data_wrenchIt=data.wrench.begin(); data_wrenchIt!=data.wrench.end(); data_wrenchIt++) {
			seed += ROSCommon_msgs::Geometry_msgs_Wrench::generateDataHash(*data_wrenchIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	Sensor_msgs_MultiDOFJointStateCore::Sensor_msgs_MultiDOFJointStateCore()
	:	idl_Sensor_msgs_MultiDOFJointState()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setJoint_names(std::vector<std::string>());
		setTransforms(std::vector<ROSCommon_msgs::Geometry_msgs_Transform>());
		setTwist(std::vector<ROSCommon_msgs::Geometry_msgs_Twist>());
		setWrench(std::vector<ROSCommon_msgs::Geometry_msgs_Wrench>());
	}
	
	Sensor_msgs_MultiDOFJointStateCore::Sensor_msgs_MultiDOFJointStateCore(const DATATYPE &data)
	:	idl_Sensor_msgs_MultiDOFJointState(data)
	{  }

	Sensor_msgs_MultiDOFJointStateCore::~Sensor_msgs_MultiDOFJointStateCore()
	{  }
	
	void Sensor_msgs_MultiDOFJointStateCore::to_ostream(std::ostream &os) const
	{
	  os << "Sensor_msgs_MultiDOFJointState(";
	  getHeader().to_ostream(os);
	  std::vector<std::string>::const_iterator joint_namesIt;
	  std::vector<std::string> joint_namesList = getJoint_namesCopy();
	  for(joint_namesIt=joint_namesList.begin(); joint_namesIt!=joint_namesList.end(); joint_namesIt++) {
	  	os << *joint_namesIt << " ";
	  }
	  std::vector<ROSCommon_msgs::Geometry_msgs_Transform>::const_iterator transformsIt;
	  std::vector<ROSCommon_msgs::Geometry_msgs_Transform> transformsList = getTransformsCopy();
	  for(transformsIt=transformsList.begin(); transformsIt!=transformsList.end(); transformsIt++) {
	  	transformsIt->to_ostream(os);
	  }
	  std::vector<ROSCommon_msgs::Geometry_msgs_Twist>::const_iterator twistIt;
	  std::vector<ROSCommon_msgs::Geometry_msgs_Twist> twistList = getTwistCopy();
	  for(twistIt=twistList.begin(); twistIt!=twistList.end(); twistIt++) {
	  	twistIt->to_ostream(os);
	  }
	  std::vector<ROSCommon_msgs::Geometry_msgs_Wrench>::const_iterator wrenchIt;
	  std::vector<ROSCommon_msgs::Geometry_msgs_Wrench> wrenchList = getWrenchCopy();
	  for(wrenchIt=wrenchList.begin(); wrenchIt!=wrenchList.end(); wrenchIt++) {
	  	wrenchIt->to_ostream(os);
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void Sensor_msgs_MultiDOFJointStateCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		std::vector<std::string>::const_iterator joint_namesIt;
		std::vector<std::string> joint_namesList = getJoint_namesCopy();
		counter = 0;
		os << indent << "<joint_namesList n=\"" << joint_namesList.size() << "\">";
		for(joint_namesIt=joint_namesList.begin(); joint_namesIt!=joint_namesList.end(); joint_namesIt++) {
			os << indent << "<joint_names i=\"" << counter++ << "\">" << *joint_namesIt << "</joint_names>";
		}
		os << indent << "</joint_namesList>";
		std::vector<ROSCommon_msgs::Geometry_msgs_Transform>::const_iterator transformsIt;
		std::vector<ROSCommon_msgs::Geometry_msgs_Transform> transformsList = getTransformsCopy();
		counter = 0;
		os << indent << "<transformsList n=\"" << transformsList.size() << "\">";
		for(transformsIt=transformsList.begin(); transformsIt!=transformsList.end(); transformsIt++) {
			os << indent << "<transforms i=\"" << counter++ << "\">";
			transformsIt->to_xml(os, indent);
			os << indent << "</transforms>";
		}
		os << indent << "</transformsList>";
		std::vector<ROSCommon_msgs::Geometry_msgs_Twist>::const_iterator twistIt;
		std::vector<ROSCommon_msgs::Geometry_msgs_Twist> twistList = getTwistCopy();
		counter = 0;
		os << indent << "<twistList n=\"" << twistList.size() << "\">";
		for(twistIt=twistList.begin(); twistIt!=twistList.end(); twistIt++) {
			os << indent << "<twist i=\"" << counter++ << "\">";
			twistIt->to_xml(os, indent);
			os << indent << "</twist>";
		}
		os << indent << "</twistList>";
		std::vector<ROSCommon_msgs::Geometry_msgs_Wrench>::const_iterator wrenchIt;
		std::vector<ROSCommon_msgs::Geometry_msgs_Wrench> wrenchList = getWrenchCopy();
		counter = 0;
		os << indent << "<wrenchList n=\"" << wrenchList.size() << "\">";
		for(wrenchIt=wrenchList.begin(); wrenchIt!=wrenchList.end(); wrenchIt++) {
			os << indent << "<wrench i=\"" << counter++ << "\">";
			wrenchIt->to_xml(os, indent);
			os << indent << "</wrench>";
		}
		os << indent << "</wrenchList>";
	}
	
	// restore from xml stream
	void Sensor_msgs_MultiDOFJointStateCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_joint_namesList("<joint_namesList n=\"");
		static const Smart::KnuthMorrisPratt kmp_joint_names("\">");
		static const Smart::KnuthMorrisPratt kmp_transformsList("<transformsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_transforms("\">");
		static const Smart::KnuthMorrisPratt kmp_twistList("<twistList n=\"");
		static const Smart::KnuthMorrisPratt kmp_twist("\">");
		static const Smart::KnuthMorrisPratt kmp_wrenchList("<wrenchList n=\"");
		static const Smart::KnuthMorrisPratt kmp_wrench("\">");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_joint_namesList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			std::string joint_namesItem;
			std::vector<std::string> joint_namesList;
			kmp_joint_names.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_joint_names.search(is)) {
					is >> joint_namesItem;
					joint_namesList.push_back(joint_namesItem);
				}
			}
			setJoint_names(joint_namesList);
		}
		if(kmp_transformsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSCommon_msgs::Geometry_msgs_Transform transformsItem;
			std::vector<ROSCommon_msgs::Geometry_msgs_Transform> transformsList;
			kmp_transforms.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_transforms.search(is)) {
					transformsItem.from_xml(is);
					transformsList.push_back(transformsItem);
				}
			}
			setTransforms(transformsList);
		}
		if(kmp_twistList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSCommon_msgs::Geometry_msgs_Twist twistItem;
			std::vector<ROSCommon_msgs::Geometry_msgs_Twist> twistList;
			kmp_twist.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_twist.search(is)) {
					twistItem.from_xml(is);
					twistList.push_back(twistItem);
				}
			}
			setTwist(twistList);
		}
		if(kmp_wrenchList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSCommon_msgs::Geometry_msgs_Wrench wrenchItem;
			std::vector<ROSCommon_msgs::Geometry_msgs_Wrench> wrenchList;
			kmp_wrench.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_wrench.search(is)) {
					wrenchItem.from_xml(is);
					wrenchList.push_back(wrenchItem);
				}
			}
			setWrench(wrenchList);
		}
	}
	
	/*
	void Sensor_msgs_MultiDOFJointStateCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Sensor_msgs_MultiDOFJointStateACE.hh)
		cdr << idl_Sensor_msgs_MultiDOFJointState;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Sensor_msgs_MultiDOFJointState);
		cdr << data_hash;
		// std::cout << "Sensor_msgs_MultiDOFJointStateCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Sensor_msgs_MultiDOFJointStateCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Sensor_msgs_MultiDOFJointStateACE.hh)
		cdr >> idl_Sensor_msgs_MultiDOFJointState;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Sensor_msgs_MultiDOFJointState);
		assert(data_hash == own_hash);
		// std::cout << "Sensor_msgs_MultiDOFJointStateCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
