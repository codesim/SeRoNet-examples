//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Trajectory_msgs_MultiDOFJointTrajectoryPointACE.hh"
#include <ace/SString.h>
#include "ROSCommon_msgs/Geometry_msgs_TransformACE.hh"
#include "CommBasicObjects/CommTimeStampACE.hh"
#include "ROSCommon_msgs/Geometry_msgs_TwistACE.hh"

// serialization operator for element Trajectory_msgs_MultiDOFJointTrajectoryPoint
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Trajectory_msgs_MultiDOFJointTrajectoryPoint &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element transforms
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.transforms.size());
	std::vector<ROSCommon_msgsIDL::Geometry_msgs_Transform>::const_iterator data_transformsIt;
	for(data_transformsIt=data.transforms.begin(); data_transformsIt!=data.transforms.end(); data_transformsIt++) {
		good_bit = good_bit && cdr << *data_transformsIt;
	}
	// serialize list-element velocities
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.velocities.size());
	std::vector<ROSCommon_msgsIDL::Geometry_msgs_Twist>::const_iterator data_velocitiesIt;
	for(data_velocitiesIt=data.velocities.begin(); data_velocitiesIt!=data.velocities.end(); data_velocitiesIt++) {
		good_bit = good_bit && cdr << *data_velocitiesIt;
	}
	// serialize list-element accelerations
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.accelerations.size());
	std::vector<ROSCommon_msgsIDL::Geometry_msgs_Twist>::const_iterator data_accelerationsIt;
	for(data_accelerationsIt=data.accelerations.begin(); data_accelerationsIt!=data.accelerations.end(); data_accelerationsIt++) {
		good_bit = good_bit && cdr << *data_accelerationsIt;
	}
	// serialize list-element time_from_start
	good_bit = good_bit && cdr << data.time_from_start;
	
	return good_bit;
}

// de-serialization operator for element Trajectory_msgs_MultiDOFJointTrajectoryPoint
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Trajectory_msgs_MultiDOFJointTrajectoryPoint &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element transforms
	ACE_CDR::ULong data_transformsNbr;
	good_bit = good_bit && cdr >> data_transformsNbr;
	data.transforms.clear();
	ROSCommon_msgsIDL::Geometry_msgs_Transform data_transformsItem;
	for(ACE_CDR::ULong i=0; i<data_transformsNbr; ++i) {
		good_bit = good_bit && cdr >> data_transformsItem;
		data.transforms.push_back(data_transformsItem);
	}
	// deserialize list-type element velocities
	ACE_CDR::ULong data_velocitiesNbr;
	good_bit = good_bit && cdr >> data_velocitiesNbr;
	data.velocities.clear();
	ROSCommon_msgsIDL::Geometry_msgs_Twist data_velocitiesItem;
	for(ACE_CDR::ULong i=0; i<data_velocitiesNbr; ++i) {
		good_bit = good_bit && cdr >> data_velocitiesItem;
		data.velocities.push_back(data_velocitiesItem);
	}
	// deserialize list-type element accelerations
	ACE_CDR::ULong data_accelerationsNbr;
	good_bit = good_bit && cdr >> data_accelerationsNbr;
	data.accelerations.clear();
	ROSCommon_msgsIDL::Geometry_msgs_Twist data_accelerationsItem;
	for(ACE_CDR::ULong i=0; i<data_accelerationsNbr; ++i) {
		good_bit = good_bit && cdr >> data_accelerationsItem;
		data.accelerations.push_back(data_accelerationsItem);
	}
	// deserialize type element time_from_start
	good_bit = good_bit && cdr >> data.time_from_start;
	
	return good_bit;
}

// serialization operator for CommunicationObject Trajectory_msgs_MultiDOFJointTrajectoryPoint
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Trajectory_msgs_MultiDOFJointTrajectoryPoint &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Trajectory_msgs_MultiDOFJointTrajectoryPoint
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Trajectory_msgs_MultiDOFJointTrajectoryPoint &obj)
{
	return cdr >> obj.set();
}
