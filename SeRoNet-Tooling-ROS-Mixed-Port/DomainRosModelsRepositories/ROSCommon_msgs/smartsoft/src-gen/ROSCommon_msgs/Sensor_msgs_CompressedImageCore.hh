//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SENSOR_MSGS_COMPRESSEDIMAGE_CORE_H_
#define ROSCOMMON_MSGS_SENSOR_MSGS_COMPRESSEDIMAGE_CORE_H_

#include "ROSCommon_msgs/Sensor_msgs_CompressedImageData.hh"
#include "ROSRos_core/Std_msgs_Header.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Sensor_msgs_CompressedImageCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Sensor_msgs_CompressedImage idl_Sensor_msgs_CompressedImage;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Sensor_msgs_CompressedImage DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Sensor_msgs_CompressedImageCore();
	Sensor_msgs_CompressedImageCore(const DATATYPE &data);
	// default destructor
	virtual ~Sensor_msgs_CompressedImageCore();
	
	const DATATYPE& get() const { return idl_Sensor_msgs_CompressedImage; }
	operator const DATATYPE&() const { return idl_Sensor_msgs_CompressedImage; }
	DATATYPE& set() { return idl_Sensor_msgs_CompressedImage; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Sensor_msgs_CompressedImage"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Header
	inline ROSRos_core::Std_msgs_Header getHeader() const { return ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_CompressedImage.header); }
	inline Sensor_msgs_CompressedImageCore& setHeader(const ROSRos_core::Std_msgs_Header &header) { idl_Sensor_msgs_CompressedImage.header = header; return *this; }
	
	// getter and setter for element Format
	inline std::string getFormat() const { return idl_Sensor_msgs_CompressedImage.format; }
	inline Sensor_msgs_CompressedImageCore& setFormat(const std::string &format) { idl_Sensor_msgs_CompressedImage.format = format; return *this; }
	
	// getter and setter for element Data
	/**
	 * Getter methods for idl_Sensor_msgs_CompressedImage.data of type vector<unsigned char>
	 */
	inline std::vector<unsigned char>& getDataRef() { return idl_Sensor_msgs_CompressedImage.data; }
	inline std::vector<unsigned char> getDataCopy() const {
		return std::vector<unsigned char>(idl_Sensor_msgs_CompressedImage.data.begin(), idl_Sensor_msgs_CompressedImage.data.end());
	}
	inline unsigned char getDataElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_CompressedImage.data[pos]; }
	inline size_t getDataSize() const { return idl_Sensor_msgs_CompressedImage.data.size(); }
	inline bool isDataEmpty() const { return idl_Sensor_msgs_CompressedImage.data.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_CompressedImage.data of type vector<unsigned char>
	 */
	inline Sensor_msgs_CompressedImageCore& setData(const std::vector<unsigned char> &data) { idl_Sensor_msgs_CompressedImage.data = data; return *this; }
	inline bool setDataElemAtPos(const size_t &pos, const unsigned char &elem) {
		if(pos < idl_Sensor_msgs_CompressedImage.data.size()) {
			idl_Sensor_msgs_CompressedImage.data[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertDataVectorAtPos(const size_t &pos, const std::vector<unsigned char> &data) {
		if(pos < idl_Sensor_msgs_CompressedImage.data.size()) {
			idl_Sensor_msgs_CompressedImage.data.insert(idl_Sensor_msgs_CompressedImage.data.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeData(const size_t &size) { idl_Sensor_msgs_CompressedImage.data.resize(size); }
	inline bool eraseDataElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_CompressedImage.data.size() ) {
			idl_Sensor_msgs_CompressedImage.data.erase(idl_Sensor_msgs_CompressedImage.data.begin()+pos, idl_Sensor_msgs_CompressedImage.data.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearData() { idl_Sensor_msgs_CompressedImage.data.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_SENSOR_MSGS_COMPRESSEDIMAGE_CORE_H_ */
