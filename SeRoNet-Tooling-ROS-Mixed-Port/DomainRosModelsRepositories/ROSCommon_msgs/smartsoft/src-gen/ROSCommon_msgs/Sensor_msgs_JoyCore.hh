//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SENSOR_MSGS_JOY_CORE_H_
#define ROSCOMMON_MSGS_SENSOR_MSGS_JOY_CORE_H_

#include "ROSCommon_msgs/Sensor_msgs_JoyData.hh"
#include "ROSRos_core/Std_msgs_Header.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Sensor_msgs_JoyCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Sensor_msgs_Joy idl_Sensor_msgs_Joy;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Sensor_msgs_Joy DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Sensor_msgs_JoyCore();
	Sensor_msgs_JoyCore(const DATATYPE &data);
	// default destructor
	virtual ~Sensor_msgs_JoyCore();
	
	const DATATYPE& get() const { return idl_Sensor_msgs_Joy; }
	operator const DATATYPE&() const { return idl_Sensor_msgs_Joy; }
	DATATYPE& set() { return idl_Sensor_msgs_Joy; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Sensor_msgs_Joy"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Header
	inline ROSRos_core::Std_msgs_Header getHeader() const { return ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_Joy.header); }
	inline Sensor_msgs_JoyCore& setHeader(const ROSRos_core::Std_msgs_Header &header) { idl_Sensor_msgs_Joy.header = header; return *this; }
	
	// getter and setter for element Axes
	/**
	 * Getter methods for idl_Sensor_msgs_Joy.axes of type vector<float>
	 */
	inline std::vector<float>& getAxesRef() { return idl_Sensor_msgs_Joy.axes; }
	inline std::vector<float> getAxesCopy() const {
		return std::vector<float>(idl_Sensor_msgs_Joy.axes.begin(), idl_Sensor_msgs_Joy.axes.end());
	}
	inline float getAxesElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_Joy.axes[pos]; }
	inline size_t getAxesSize() const { return idl_Sensor_msgs_Joy.axes.size(); }
	inline bool isAxesEmpty() const { return idl_Sensor_msgs_Joy.axes.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_Joy.axes of type vector<float>
	 */
	inline Sensor_msgs_JoyCore& setAxes(const std::vector<float> &axes) { idl_Sensor_msgs_Joy.axes = axes; return *this; }
	inline bool setAxesElemAtPos(const size_t &pos, const float &elem) {
		if(pos < idl_Sensor_msgs_Joy.axes.size()) {
			idl_Sensor_msgs_Joy.axes[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertAxesVectorAtPos(const size_t &pos, const std::vector<float> &data) {
		if(pos < idl_Sensor_msgs_Joy.axes.size()) {
			idl_Sensor_msgs_Joy.axes.insert(idl_Sensor_msgs_Joy.axes.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeAxes(const size_t &size) { idl_Sensor_msgs_Joy.axes.resize(size); }
	inline bool eraseAxesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_Joy.axes.size() ) {
			idl_Sensor_msgs_Joy.axes.erase(idl_Sensor_msgs_Joy.axes.begin()+pos, idl_Sensor_msgs_Joy.axes.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearAxes() { idl_Sensor_msgs_Joy.axes.clear(); }
	
	// getter and setter for element Buttons
	/**
	 * Getter methods for idl_Sensor_msgs_Joy.buttons of type vector<int>
	 */
	inline std::vector<int>& getButtonsRef() { return idl_Sensor_msgs_Joy.buttons; }
	inline std::vector<int> getButtonsCopy() const {
		return std::vector<int>(idl_Sensor_msgs_Joy.buttons.begin(), idl_Sensor_msgs_Joy.buttons.end());
	}
	inline int getButtonsElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_Joy.buttons[pos]; }
	inline size_t getButtonsSize() const { return idl_Sensor_msgs_Joy.buttons.size(); }
	inline bool isButtonsEmpty() const { return idl_Sensor_msgs_Joy.buttons.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_Joy.buttons of type vector<int>
	 */
	inline Sensor_msgs_JoyCore& setButtons(const std::vector<int> &buttons) { idl_Sensor_msgs_Joy.buttons = buttons; return *this; }
	inline bool setButtonsElemAtPos(const size_t &pos, const int &elem) {
		if(pos < idl_Sensor_msgs_Joy.buttons.size()) {
			idl_Sensor_msgs_Joy.buttons[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertButtonsVectorAtPos(const size_t &pos, const std::vector<int> &data) {
		if(pos < idl_Sensor_msgs_Joy.buttons.size()) {
			idl_Sensor_msgs_Joy.buttons.insert(idl_Sensor_msgs_Joy.buttons.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeButtons(const size_t &size) { idl_Sensor_msgs_Joy.buttons.resize(size); }
	inline bool eraseButtonsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_Joy.buttons.size() ) {
			idl_Sensor_msgs_Joy.buttons.erase(idl_Sensor_msgs_Joy.buttons.begin()+pos, idl_Sensor_msgs_Joy.buttons.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearButtons() { idl_Sensor_msgs_Joy.buttons.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_SENSOR_MSGS_JOY_CORE_H_ */
