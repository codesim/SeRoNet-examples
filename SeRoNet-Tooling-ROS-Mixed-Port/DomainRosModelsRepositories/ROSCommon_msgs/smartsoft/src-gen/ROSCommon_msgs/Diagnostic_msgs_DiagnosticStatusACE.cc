//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Diagnostic_msgs_DiagnosticStatusACE.hh"
#include <ace/SString.h>
#include "ROSCommon_msgs/Diagnostic_msgs_KeyValueACE.hh"

// serialization operator for element Diagnostic_msgs_DiagnosticStatus
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Diagnostic_msgs_DiagnosticStatus &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element level
	good_bit = good_bit && cdr.write_octet(data.level);
	// serialize list-element name
	good_bit = good_bit && cdr << ACE_CString(data.name.c_str());
	// serialize list-element message
	good_bit = good_bit && cdr << ACE_CString(data.message.c_str());
	// serialize list-element hardware_id
	good_bit = good_bit && cdr << ACE_CString(data.hardware_id.c_str());
	// serialize list-element values
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.values.size());
	std::vector<ROSCommon_msgsIDL::Diagnostic_msgs_KeyValue>::const_iterator data_valuesIt;
	for(data_valuesIt=data.values.begin(); data_valuesIt!=data.values.end(); data_valuesIt++) {
		good_bit = good_bit && cdr << *data_valuesIt;
	}
	
	return good_bit;
}

// de-serialization operator for element Diagnostic_msgs_DiagnosticStatus
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Diagnostic_msgs_DiagnosticStatus &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element level
	good_bit = good_bit && cdr.read_octet(data.level);
	// deserialize string-type element name
	ACE_CString data_name_str;
	good_bit = good_bit && cdr >> data_name_str;
	data.name = data_name_str.c_str();
	// deserialize string-type element message
	ACE_CString data_message_str;
	good_bit = good_bit && cdr >> data_message_str;
	data.message = data_message_str.c_str();
	// deserialize string-type element hardware_id
	ACE_CString data_hardware_id_str;
	good_bit = good_bit && cdr >> data_hardware_id_str;
	data.hardware_id = data_hardware_id_str.c_str();
	// deserialize list-type element values
	ACE_CDR::ULong data_valuesNbr;
	good_bit = good_bit && cdr >> data_valuesNbr;
	data.values.clear();
	ROSCommon_msgsIDL::Diagnostic_msgs_KeyValue data_valuesItem;
	for(ACE_CDR::ULong i=0; i<data_valuesNbr; ++i) {
		good_bit = good_bit && cdr >> data_valuesItem;
		data.values.push_back(data_valuesItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject Diagnostic_msgs_DiagnosticStatus
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Diagnostic_msgs_DiagnosticStatus &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Diagnostic_msgs_DiagnosticStatus
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Diagnostic_msgs_DiagnosticStatus &obj)
{
	return cdr >> obj.set();
}
