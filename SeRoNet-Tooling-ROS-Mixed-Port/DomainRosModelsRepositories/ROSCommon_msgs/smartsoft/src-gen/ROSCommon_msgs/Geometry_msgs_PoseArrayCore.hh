//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_GEOMETRY_MSGS_POSEARRAY_CORE_H_
#define ROSCOMMON_MSGS_GEOMETRY_MSGS_POSEARRAY_CORE_H_

#include "ROSCommon_msgs/Geometry_msgs_PoseArrayData.hh"
#include "ROSCommon_msgs/Geometry_msgs_Pose.hh"
#include "ROSRos_core/Std_msgs_Header.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Geometry_msgs_PoseArrayCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Geometry_msgs_PoseArray idl_Geometry_msgs_PoseArray;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Geometry_msgs_PoseArray DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Geometry_msgs_PoseArrayCore();
	Geometry_msgs_PoseArrayCore(const DATATYPE &data);
	// default destructor
	virtual ~Geometry_msgs_PoseArrayCore();
	
	const DATATYPE& get() const { return idl_Geometry_msgs_PoseArray; }
	operator const DATATYPE&() const { return idl_Geometry_msgs_PoseArray; }
	DATATYPE& set() { return idl_Geometry_msgs_PoseArray; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Geometry_msgs_PoseArray"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Header
	inline ROSRos_core::Std_msgs_Header getHeader() const { return ROSRos_core::Std_msgs_Header(idl_Geometry_msgs_PoseArray.header); }
	inline Geometry_msgs_PoseArrayCore& setHeader(const ROSRos_core::Std_msgs_Header &header) { idl_Geometry_msgs_PoseArray.header = header; return *this; }
	
	// getter and setter for element Poses
	/**
	 * Getter methods for element idl_Geometry_msgs_PoseArray.poses of type vector<ROSCommon_msgs::Geometry_msgs_Pose>
	 */
	inline std::vector<ROSCommon_msgs::Geometry_msgs_Pose> getPosesCopy() const { 
		return std::vector<ROSCommon_msgs::Geometry_msgs_Pose>(idl_Geometry_msgs_PoseArray.poses.begin(), idl_Geometry_msgs_PoseArray.poses.end());
	}
	inline ROSCommon_msgs::Geometry_msgs_Pose getPosesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Geometry_msgs_Pose(idl_Geometry_msgs_PoseArray.poses[pos]);
	}
	inline size_t getPosesSize() const { return idl_Geometry_msgs_PoseArray.poses.size(); }
	inline bool isPosesEmpty() const { return idl_Geometry_msgs_PoseArray.poses.empty(); }
	/**
	 * Setter methods for idl_Geometry_msgs_PoseArray.poses of type vector<ROSCommon_msgs::Geometry_msgs_Pose>
	 */
	inline Geometry_msgs_PoseArrayCore& setPoses(const std::vector<ROSCommon_msgs::Geometry_msgs_Pose> &poses) { 
		idl_Geometry_msgs_PoseArray.poses.assign(poses.begin(), poses.end());
		return *this;
	}
	inline bool setPosesElemAtPos(const size_t &pos, const ROSCommon_msgs::Geometry_msgs_Pose &elem) {
		if(pos < idl_Geometry_msgs_PoseArray.poses.size()) {
			idl_Geometry_msgs_PoseArray.poses[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertPosesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Geometry_msgs_Pose> &data) {
		if(pos < idl_Geometry_msgs_PoseArray.poses.size()) {
			idl_Geometry_msgs_PoseArray.poses.insert(idl_Geometry_msgs_PoseArray.poses.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizePoses(const size_t &size) { idl_Geometry_msgs_PoseArray.poses.resize(size); }
	inline bool erasePosesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Geometry_msgs_PoseArray.poses.size() ) {
			idl_Geometry_msgs_PoseArray.poses.erase(idl_Geometry_msgs_PoseArray.poses.begin()+pos, idl_Geometry_msgs_PoseArray.poses.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearPoses() { idl_Geometry_msgs_PoseArray.poses.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_GEOMETRY_MSGS_POSEARRAY_CORE_H_ */
