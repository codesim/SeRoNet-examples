//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_LaserScanACE.hh"
#include <ace/SString.h>
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Sensor_msgs_LaserScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Sensor_msgs_LaserScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element angle_min
	good_bit = good_bit && cdr.write_float(data.angle_min);
	// serialize list-element angle_max
	good_bit = good_bit && cdr.write_float(data.angle_max);
	// serialize list-element angle_increment
	good_bit = good_bit && cdr.write_float(data.angle_increment);
	// serialize list-element time_increment
	good_bit = good_bit && cdr.write_float(data.time_increment);
	// serialize list-element scan_time
	good_bit = good_bit && cdr.write_float(data.scan_time);
	// serialize list-element range_min
	good_bit = good_bit && cdr.write_float(data.range_min);
	// serialize list-element range_max
	good_bit = good_bit && cdr.write_float(data.range_max);
	// serialize list-element ranges
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.ranges.size());
	good_bit = good_bit && cdr.write_float_array(data.ranges.data(), data.ranges.size());
	// serialize list-element intensities
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.intensities.size());
	good_bit = good_bit && cdr.write_float_array(data.intensities.data(), data.intensities.size());
	
	return good_bit;
}

// de-serialization operator for element Sensor_msgs_LaserScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Sensor_msgs_LaserScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize type element angle_min
	good_bit = good_bit && cdr.read_float(data.angle_min);
	// deserialize type element angle_max
	good_bit = good_bit && cdr.read_float(data.angle_max);
	// deserialize type element angle_increment
	good_bit = good_bit && cdr.read_float(data.angle_increment);
	// deserialize type element time_increment
	good_bit = good_bit && cdr.read_float(data.time_increment);
	// deserialize type element scan_time
	good_bit = good_bit && cdr.read_float(data.scan_time);
	// deserialize type element range_min
	good_bit = good_bit && cdr.read_float(data.range_min);
	// deserialize type element range_max
	good_bit = good_bit && cdr.read_float(data.range_max);
	// deserialize list-type element ranges
	ACE_CDR::ULong data_rangesNbr;
	good_bit = good_bit && cdr >> data_rangesNbr;
	data.ranges.resize(data_rangesNbr);
	good_bit = good_bit && cdr.read_float_array(data.ranges.data(), data_rangesNbr);
	// deserialize list-type element intensities
	ACE_CDR::ULong data_intensitiesNbr;
	good_bit = good_bit && cdr >> data_intensitiesNbr;
	data.intensities.resize(data_intensitiesNbr);
	good_bit = good_bit && cdr.read_float_array(data.intensities.data(), data_intensitiesNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject Sensor_msgs_LaserScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Sensor_msgs_LaserScan &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Sensor_msgs_LaserScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Sensor_msgs_LaserScan &obj)
{
	return cdr >> obj.set();
}
