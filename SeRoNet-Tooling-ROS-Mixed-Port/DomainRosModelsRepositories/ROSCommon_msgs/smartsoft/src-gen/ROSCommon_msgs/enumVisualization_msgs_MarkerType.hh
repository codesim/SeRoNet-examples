//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_VISUALIZATION_MSGS_MARKERTYPE_ENUM_H_
#define ROSCOMMON_MSGS_VISUALIZATION_MSGS_MARKERTYPE_ENUM_H_

#include <ROSCommon_msgs/enumVisualization_msgs_MarkerTypeData.hh>

#include <string>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace ROSCommon_msgs {
	
	class Visualization_msgs_MarkerType {
	private:
		ROSCommon_msgsIDL::Visualization_msgs_MarkerType value;
		
	public:
		enum ENUM_Visualization_msgs_MarkerType {
			ENUM_VALUE_UNDEFINED = 0,
			ARROW = 1,
			CUBE = 2,
			SPHERE = 3,
			CYLINDER = 4,
			LINE_STRIP = 5,
			LINE_LIST = 6,
			CUBE_LIST = 7,
			SPHERE_LIST = 8,
			POINTS = 9,
			TEXT_VIEW_FACING = 10,
			MESH_RESOURCE = 11,
			TRIANGLE_LIST = 12,
			ADD = 13,
			MODIFY = 14,
			DELETE = 15,
			DELETEALL = 16
		};
		
		// default constructor
		Visualization_msgs_MarkerType() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		Visualization_msgs_MarkerType(ENUM_Visualization_msgs_MarkerType e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type
		Visualization_msgs_MarkerType(ROSCommon_msgsIDL::Visualization_msgs_MarkerType e) {
			value = e;
		}
		
		//const ROSCommon_msgsIDL::Visualization_msgs_MarkerType& get() const { return value; }
		
		// ENUM operator
		operator ENUM_Visualization_msgs_MarkerType() const {
			return static_cast<ENUM_Visualization_msgs_MarkerType>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_Visualization_msgs_MarkerType t) const {
			return this->value == t;
		}
		
		std::string to_string() const {
			std::string result = "";
			switch (value) {
				case ARROW:
					result = "Visualization_msgs_MarkerType::ARROW";
					break;
				case CUBE:
					result = "Visualization_msgs_MarkerType::CUBE";
					break;
				case SPHERE:
					result = "Visualization_msgs_MarkerType::SPHERE";
					break;
				case CYLINDER:
					result = "Visualization_msgs_MarkerType::CYLINDER";
					break;
				case LINE_STRIP:
					result = "Visualization_msgs_MarkerType::LINE_STRIP";
					break;
				case LINE_LIST:
					result = "Visualization_msgs_MarkerType::LINE_LIST";
					break;
				case CUBE_LIST:
					result = "Visualization_msgs_MarkerType::CUBE_LIST";
					break;
				case SPHERE_LIST:
					result = "Visualization_msgs_MarkerType::SPHERE_LIST";
					break;
				case POINTS:
					result = "Visualization_msgs_MarkerType::POINTS";
					break;
				case TEXT_VIEW_FACING:
					result = "Visualization_msgs_MarkerType::TEXT_VIEW_FACING";
					break;
				case MESH_RESOURCE:
					result = "Visualization_msgs_MarkerType::MESH_RESOURCE";
					break;
				case TRIANGLE_LIST:
					result = "Visualization_msgs_MarkerType::TRIANGLE_LIST";
					break;
				case ADD:
					result = "Visualization_msgs_MarkerType::ADD";
					break;
				case MODIFY:
					result = "Visualization_msgs_MarkerType::MODIFY";
					break;
				case DELETE:
					result = "Visualization_msgs_MarkerType::DELETE";
					break;
				case DELETEALL:
					result = "Visualization_msgs_MarkerType::DELETEALL";
					break;
				default:
					result = "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const Visualization_msgs_MarkerType &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
