//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_CameraInfoACE.hh"
#include <ace/SString.h>
#include "ROSCommon_msgs/Sensor_msgs_RegionOfInterestACE.hh"
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Sensor_msgs_CameraInfo
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Sensor_msgs_CameraInfo &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element height
	good_bit = good_bit && cdr.write_ulong(data.height);
	// serialize list-element width
	good_bit = good_bit && cdr.write_ulong(data.width);
	// serialize list-element distortion_model
	good_bit = good_bit && cdr << ACE_CString(data.distortion_model.c_str());
	// serialize list-element D
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.D.size());
	good_bit = good_bit && cdr.write_double_array(data.D.data(), data.D.size());
	// serialize list-element K
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.K.size());
	good_bit = good_bit && cdr.write_double_array(data.K.data(), data.K.size());
	// serialize list-element R
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.R.size());
	good_bit = good_bit && cdr.write_double_array(data.R.data(), data.R.size());
	// serialize list-element P
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.P.size());
	good_bit = good_bit && cdr.write_double_array(data.P.data(), data.P.size());
	// serialize list-element binning_x
	good_bit = good_bit && cdr.write_ulong(data.binning_x);
	// serialize list-element binning_y
	good_bit = good_bit && cdr.write_ulong(data.binning_y);
	// serialize list-element roi
	good_bit = good_bit && cdr << data.roi;
	
	return good_bit;
}

// de-serialization operator for element Sensor_msgs_CameraInfo
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Sensor_msgs_CameraInfo &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize type element height
	good_bit = good_bit && cdr.read_ulong(data.height);
	// deserialize type element width
	good_bit = good_bit && cdr.read_ulong(data.width);
	// deserialize string-type element distortion_model
	ACE_CString data_distortion_model_str;
	good_bit = good_bit && cdr >> data_distortion_model_str;
	data.distortion_model = data_distortion_model_str.c_str();
	// deserialize list-type element D
	ACE_CDR::ULong data_DNbr;
	good_bit = good_bit && cdr >> data_DNbr;
	data.D.resize(data_DNbr);
	good_bit = good_bit && cdr.read_double_array(data.D.data(), data_DNbr);
	// deserialize list-type element K
	ACE_CDR::ULong data_KNbr;
	good_bit = good_bit && cdr >> data_KNbr;
	data.K.resize(data_KNbr);
	good_bit = good_bit && cdr.read_double_array(data.K.data(), data_KNbr);
	// deserialize list-type element R
	ACE_CDR::ULong data_RNbr;
	good_bit = good_bit && cdr >> data_RNbr;
	data.R.resize(data_RNbr);
	good_bit = good_bit && cdr.read_double_array(data.R.data(), data_RNbr);
	// deserialize list-type element P
	ACE_CDR::ULong data_PNbr;
	good_bit = good_bit && cdr >> data_PNbr;
	data.P.resize(data_PNbr);
	good_bit = good_bit && cdr.read_double_array(data.P.data(), data_PNbr);
	// deserialize type element binning_x
	good_bit = good_bit && cdr.read_ulong(data.binning_x);
	// deserialize type element binning_y
	good_bit = good_bit && cdr.read_ulong(data.binning_y);
	// deserialize type element roi
	good_bit = good_bit && cdr >> data.roi;
	
	return good_bit;
}

// serialization operator for CommunicationObject Sensor_msgs_CameraInfo
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Sensor_msgs_CameraInfo &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Sensor_msgs_CameraInfo
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Sensor_msgs_CameraInfo &obj)
{
	return cdr >> obj.set();
}
