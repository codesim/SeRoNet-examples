//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Stereo_msgs_DisparityImageCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Stereo_msgs_DisparityImageACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Stereo_msgs_DisparityImageCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Stereo_msgs_DisparityImageCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Stereo_msgs_DisparityImage.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Sensor_msgs_Image(idl_Stereo_msgs_DisparityImage.image)
		ROSCommon_msgs::Sensor_msgs_Image::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Sensor_msgs_RegionOfInterest(idl_Stereo_msgs_DisparityImage.valid_window)
		ROSCommon_msgs::Sensor_msgs_RegionOfInterest::getAllHashValues(hashes);
	}
	
	void Stereo_msgs_DisparityImageCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Stereo_msgs_DisparityImageCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Stereo_msgs_DisparityImage.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Sensor_msgs_Image(idl_Stereo_msgs_DisparityImage.image)
		ROSCommon_msgs::Sensor_msgs_Image::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Sensor_msgs_RegionOfInterest(idl_Stereo_msgs_DisparityImage.valid_window)
		ROSCommon_msgs::Sensor_msgs_RegionOfInterest::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Stereo_msgs_DisparityImageCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		seed += ROSCommon_msgs::Sensor_msgs_Image::generateDataHash(data.image);
		boost::hash_combine(seed, data.f);
		boost::hash_combine(seed, data.T);
		seed += ROSCommon_msgs::Sensor_msgs_RegionOfInterest::generateDataHash(data.valid_window);
		boost::hash_combine(seed, data.min_disparity);
		boost::hash_combine(seed, data.max_disparity);
		boost::hash_combine(seed, data.delta_d);
		
		return seed;
	}
	#endif
	
	// default constructor
	Stereo_msgs_DisparityImageCore::Stereo_msgs_DisparityImageCore()
	:	idl_Stereo_msgs_DisparityImage()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setImage(ROSCommon_msgs::Sensor_msgs_Image());
		setF(0.0);
		setT(0.0);
		setValid_window(ROSCommon_msgs::Sensor_msgs_RegionOfInterest());
		setMin_disparity(0.0);
		setMax_disparity(0.0);
		setDelta_d(0.0);
	}
	
	Stereo_msgs_DisparityImageCore::Stereo_msgs_DisparityImageCore(const DATATYPE &data)
	:	idl_Stereo_msgs_DisparityImage(data)
	{  }

	Stereo_msgs_DisparityImageCore::~Stereo_msgs_DisparityImageCore()
	{  }
	
	void Stereo_msgs_DisparityImageCore::to_ostream(std::ostream &os) const
	{
	  os << "Stereo_msgs_DisparityImage(";
	  getHeader().to_ostream(os);
	  getImage().to_ostream(os);
	  os << getF() << " ";
	  os << getT() << " ";
	  getValid_window().to_ostream(os);
	  os << getMin_disparity() << " ";
	  os << getMax_disparity() << " ";
	  os << getDelta_d() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void Stereo_msgs_DisparityImageCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		os << indent << "<image>";
		getImage().to_xml(os, indent);
		os << indent << "</image>";
		os << indent << "<f>" << getF() << "</f>";
		os << indent << "<T>" << getT() << "</T>";
		os << indent << "<valid_window>";
		getValid_window().to_xml(os, indent);
		os << indent << "</valid_window>";
		os << indent << "<min_disparity>" << getMin_disparity() << "</min_disparity>";
		os << indent << "<max_disparity>" << getMax_disparity() << "</max_disparity>";
		os << indent << "<delta_d>" << getDelta_d() << "</delta_d>";
	}
	
	// restore from xml stream
	void Stereo_msgs_DisparityImageCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_image("<image>");
		static const Smart::KnuthMorrisPratt kmp_f("<f>");
		static const Smart::KnuthMorrisPratt kmp_T("<T>");
		static const Smart::KnuthMorrisPratt kmp_valid_window("<valid_window>");
		static const Smart::KnuthMorrisPratt kmp_min_disparity("<min_disparity>");
		static const Smart::KnuthMorrisPratt kmp_max_disparity("<max_disparity>");
		static const Smart::KnuthMorrisPratt kmp_delta_d("<delta_d>");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_image.search(is)) {
			ROSCommon_msgs::Sensor_msgs_Image imageItem;
			imageItem.from_xml(is);
			setImage(imageItem);
		}
		if(kmp_f.search(is)) {
			float fItem;
			is >> fItem;
			setF(fItem);
		}
		if(kmp_T.search(is)) {
			float TItem;
			is >> TItem;
			setT(TItem);
		}
		if(kmp_valid_window.search(is)) {
			ROSCommon_msgs::Sensor_msgs_RegionOfInterest valid_windowItem;
			valid_windowItem.from_xml(is);
			setValid_window(valid_windowItem);
		}
		if(kmp_min_disparity.search(is)) {
			float min_disparityItem;
			is >> min_disparityItem;
			setMin_disparity(min_disparityItem);
		}
		if(kmp_max_disparity.search(is)) {
			float max_disparityItem;
			is >> max_disparityItem;
			setMax_disparity(max_disparityItem);
		}
		if(kmp_delta_d.search(is)) {
			float delta_dItem;
			is >> delta_dItem;
			setDelta_d(delta_dItem);
		}
	}
	
	/*
	void Stereo_msgs_DisparityImageCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Stereo_msgs_DisparityImageACE.hh)
		cdr << idl_Stereo_msgs_DisparityImage;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Stereo_msgs_DisparityImage);
		cdr << data_hash;
		// std::cout << "Stereo_msgs_DisparityImageCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Stereo_msgs_DisparityImageCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Stereo_msgs_DisparityImageACE.hh)
		cdr >> idl_Stereo_msgs_DisparityImage;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Stereo_msgs_DisparityImage);
		assert(data_hash == own_hash);
		// std::cout << "Stereo_msgs_DisparityImageCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
