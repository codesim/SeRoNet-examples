//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_BatteryStateACE.hh"
#include <ace/SString.h>
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Sensor_msgs_BatteryState
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Sensor_msgs_BatteryState &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element voltage
	good_bit = good_bit && cdr.write_float(data.voltage);
	// serialize list-element current
	good_bit = good_bit && cdr.write_float(data.current);
	// serialize list-element charge
	good_bit = good_bit && cdr.write_float(data.charge);
	// serialize list-element capacity
	good_bit = good_bit && cdr.write_float(data.capacity);
	// serialize list-element design_capacity
	good_bit = good_bit && cdr.write_float(data.design_capacity);
	// serialize list-element percentage
	good_bit = good_bit && cdr.write_float(data.percentage);
	// serialize list-element power_supply_status
	good_bit = good_bit && cdr.write_octet(data.power_supply_status);
	// serialize list-element power_supply_health
	good_bit = good_bit && cdr.write_octet(data.power_supply_health);
	// serialize list-element power_supply_technology
	good_bit = good_bit && cdr.write_octet(data.power_supply_technology);
	// serialize list-element present
	good_bit = good_bit && cdr.write_boolean(data.present);
	// serialize list-element cell_voltage
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.cell_voltage.size());
	good_bit = good_bit && cdr.write_float_array(data.cell_voltage.data(), data.cell_voltage.size());
	// serialize list-element location
	good_bit = good_bit && cdr << ACE_CString(data.location.c_str());
	// serialize list-element serial_number
	good_bit = good_bit && cdr << ACE_CString(data.serial_number.c_str());
	
	return good_bit;
}

// de-serialization operator for element Sensor_msgs_BatteryState
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Sensor_msgs_BatteryState &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize type element voltage
	good_bit = good_bit && cdr.read_float(data.voltage);
	// deserialize type element current
	good_bit = good_bit && cdr.read_float(data.current);
	// deserialize type element charge
	good_bit = good_bit && cdr.read_float(data.charge);
	// deserialize type element capacity
	good_bit = good_bit && cdr.read_float(data.capacity);
	// deserialize type element design_capacity
	good_bit = good_bit && cdr.read_float(data.design_capacity);
	// deserialize type element percentage
	good_bit = good_bit && cdr.read_float(data.percentage);
	// deserialize type element power_supply_status
	good_bit = good_bit && cdr.read_octet(data.power_supply_status);
	// deserialize type element power_supply_health
	good_bit = good_bit && cdr.read_octet(data.power_supply_health);
	// deserialize type element power_supply_technology
	good_bit = good_bit && cdr.read_octet(data.power_supply_technology);
	// deserialize type element present
	good_bit = good_bit && cdr.read_boolean(data.present);
	// deserialize list-type element cell_voltage
	ACE_CDR::ULong data_cell_voltageNbr;
	good_bit = good_bit && cdr >> data_cell_voltageNbr;
	data.cell_voltage.resize(data_cell_voltageNbr);
	good_bit = good_bit && cdr.read_float_array(data.cell_voltage.data(), data_cell_voltageNbr);
	// deserialize string-type element location
	ACE_CString data_location_str;
	good_bit = good_bit && cdr >> data_location_str;
	data.location = data_location_str.c_str();
	// deserialize string-type element serial_number
	ACE_CString data_serial_number_str;
	good_bit = good_bit && cdr >> data_serial_number_str;
	data.serial_number = data_serial_number_str.c_str();
	
	return good_bit;
}

// serialization operator for CommunicationObject Sensor_msgs_BatteryState
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Sensor_msgs_BatteryState &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Sensor_msgs_BatteryState
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Sensor_msgs_BatteryState &obj)
{
	return cdr >> obj.set();
}
