//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerFeedbackCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerFeedbackACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Visualization_msgs_InteractiveMarkerFeedbackCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Visualization_msgs_InteractiveMarkerFeedbackCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Visualization_msgs_InteractiveMarkerFeedback.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Pose(idl_Visualization_msgs_InteractiveMarkerFeedback.pose)
		ROSCommon_msgs::Geometry_msgs_Pose::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Point(idl_Visualization_msgs_InteractiveMarkerFeedback.mouse_point)
		ROSCommon_msgs::Geometry_msgs_Point::getAllHashValues(hashes);
	}
	
	void Visualization_msgs_InteractiveMarkerFeedbackCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Visualization_msgs_InteractiveMarkerFeedbackCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Visualization_msgs_InteractiveMarkerFeedback.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Pose(idl_Visualization_msgs_InteractiveMarkerFeedback.pose)
		ROSCommon_msgs::Geometry_msgs_Pose::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Point(idl_Visualization_msgs_InteractiveMarkerFeedback.mouse_point)
		ROSCommon_msgs::Geometry_msgs_Point::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Visualization_msgs_InteractiveMarkerFeedbackCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		boost::hash_combine(seed, std::string(data.client_id.c_str()));
		boost::hash_combine(seed, std::string(data.marker_name.c_str()));
		boost::hash_combine(seed, std::string(data.control_name.c_str()));
		boost::hash_combine(seed, data.event_type);
		seed += ROSCommon_msgs::Geometry_msgs_Pose::generateDataHash(data.pose);
		boost::hash_combine(seed, data.menu_entry_id);
		seed += ROSCommon_msgs::Geometry_msgs_Point::generateDataHash(data.mouse_point);
		boost::hash_combine(seed, data.mouse_point_valid);
		
		return seed;
	}
	#endif
	
	// default constructor
	Visualization_msgs_InteractiveMarkerFeedbackCore::Visualization_msgs_InteractiveMarkerFeedbackCore()
	:	idl_Visualization_msgs_InteractiveMarkerFeedback()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setClient_id("");
		setMarker_name("");
		setControl_name("");
		setEvent_type(0);
		setPose(ROSCommon_msgs::Geometry_msgs_Pose());
		setMenu_entry_id(0);
		setMouse_point(ROSCommon_msgs::Geometry_msgs_Point());
		setMouse_point_valid(false);
	}
	
	Visualization_msgs_InteractiveMarkerFeedbackCore::Visualization_msgs_InteractiveMarkerFeedbackCore(const DATATYPE &data)
	:	idl_Visualization_msgs_InteractiveMarkerFeedback(data)
	{  }

	Visualization_msgs_InteractiveMarkerFeedbackCore::~Visualization_msgs_InteractiveMarkerFeedbackCore()
	{  }
	
	void Visualization_msgs_InteractiveMarkerFeedbackCore::to_ostream(std::ostream &os) const
	{
	  os << "Visualization_msgs_InteractiveMarkerFeedback(";
	  getHeader().to_ostream(os);
	  os << getClient_id() << " ";
	  os << getMarker_name() << " ";
	  os << getControl_name() << " ";
	  os << getEvent_type() << " ";
	  getPose().to_ostream(os);
	  os << getMenu_entry_id() << " ";
	  getMouse_point().to_ostream(os);
	  os << getMouse_point_valid() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void Visualization_msgs_InteractiveMarkerFeedbackCore::to_xml(std::ostream &os, const std::string &indent) const {
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		os << indent << "<client_id>" << getClient_id() << "</client_id>";
		os << indent << "<marker_name>" << getMarker_name() << "</marker_name>";
		os << indent << "<control_name>" << getControl_name() << "</control_name>";
		os << indent << "<event_type>" << getEvent_type() << "</event_type>";
		os << indent << "<pose>";
		getPose().to_xml(os, indent);
		os << indent << "</pose>";
		os << indent << "<menu_entry_id>" << getMenu_entry_id() << "</menu_entry_id>";
		os << indent << "<mouse_point>";
		getMouse_point().to_xml(os, indent);
		os << indent << "</mouse_point>";
		os << indent << "<mouse_point_valid>" << getMouse_point_valid() << "</mouse_point_valid>";
	}
	
	// restore from xml stream
	void Visualization_msgs_InteractiveMarkerFeedbackCore::from_xml(std::istream &is) {
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_client_id("<client_id>");
		static const Smart::KnuthMorrisPratt kmp_marker_name("<marker_name>");
		static const Smart::KnuthMorrisPratt kmp_control_name("<control_name>");
		static const Smart::KnuthMorrisPratt kmp_event_type("<event_type>");
		static const Smart::KnuthMorrisPratt kmp_pose("<pose>");
		static const Smart::KnuthMorrisPratt kmp_menu_entry_id("<menu_entry_id>");
		static const Smart::KnuthMorrisPratt kmp_mouse_point("<mouse_point>");
		static const Smart::KnuthMorrisPratt kmp_mouse_point_valid("<mouse_point_valid>");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_client_id.search(is)) {
			std::string client_idItem;
			is >> client_idItem;
			setClient_id(client_idItem);
		}
		if(kmp_marker_name.search(is)) {
			std::string marker_nameItem;
			is >> marker_nameItem;
			setMarker_name(marker_nameItem);
		}
		if(kmp_control_name.search(is)) {
			std::string control_nameItem;
			is >> control_nameItem;
			setControl_name(control_nameItem);
		}
		if(kmp_event_type.search(is)) {
			unsigned char event_typeItem;
			is >> event_typeItem;
			setEvent_type(event_typeItem);
		}
		if(kmp_pose.search(is)) {
			ROSCommon_msgs::Geometry_msgs_Pose poseItem;
			poseItem.from_xml(is);
			setPose(poseItem);
		}
		if(kmp_menu_entry_id.search(is)) {
			unsigned int menu_entry_idItem;
			is >> menu_entry_idItem;
			setMenu_entry_id(menu_entry_idItem);
		}
		if(kmp_mouse_point.search(is)) {
			ROSCommon_msgs::Geometry_msgs_Point mouse_pointItem;
			mouse_pointItem.from_xml(is);
			setMouse_point(mouse_pointItem);
		}
		if(kmp_mouse_point_valid.search(is)) {
			bool mouse_point_validItem;
			is >> mouse_point_validItem;
			setMouse_point_valid(mouse_point_validItem);
		}
	}
	
	/*
	void Visualization_msgs_InteractiveMarkerFeedbackCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Visualization_msgs_InteractiveMarkerFeedbackACE.hh)
		cdr << idl_Visualization_msgs_InteractiveMarkerFeedback;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Visualization_msgs_InteractiveMarkerFeedback);
		cdr << data_hash;
		// std::cout << "Visualization_msgs_InteractiveMarkerFeedbackCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Visualization_msgs_InteractiveMarkerFeedbackCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Visualization_msgs_InteractiveMarkerFeedbackACE.hh)
		cdr >> idl_Visualization_msgs_InteractiveMarkerFeedback;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Visualization_msgs_InteractiveMarkerFeedback);
		assert(data_hash == own_hash);
		// std::cout << "Visualization_msgs_InteractiveMarkerFeedbackCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
