//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKERCONTROL_CORE_H_
#define ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKERCONTROL_CORE_H_

#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerControlData.hh"
#include "ROSCommon_msgs/Geometry_msgs_Quaternion.hh"
#include "ROSCommon_msgs/Visualization_msgs_Marker.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Visualization_msgs_InteractiveMarkerControlCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarkerControl idl_Visualization_msgs_InteractiveMarkerControl;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarkerControl DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Visualization_msgs_InteractiveMarkerControlCore();
	Visualization_msgs_InteractiveMarkerControlCore(const DATATYPE &data);
	// default destructor
	virtual ~Visualization_msgs_InteractiveMarkerControlCore();
	
	const DATATYPE& get() const { return idl_Visualization_msgs_InteractiveMarkerControl; }
	operator const DATATYPE&() const { return idl_Visualization_msgs_InteractiveMarkerControl; }
	DATATYPE& set() { return idl_Visualization_msgs_InteractiveMarkerControl; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Name
	inline std::string getName() const { return idl_Visualization_msgs_InteractiveMarkerControl.name; }
	inline Visualization_msgs_InteractiveMarkerControlCore& setName(const std::string &name) { idl_Visualization_msgs_InteractiveMarkerControl.name = name; return *this; }
	
	// getter and setter for element Orientation
	inline ROSCommon_msgs::Geometry_msgs_Quaternion getOrientation() const { return ROSCommon_msgs::Geometry_msgs_Quaternion(idl_Visualization_msgs_InteractiveMarkerControl.orientation); }
	inline Visualization_msgs_InteractiveMarkerControlCore& setOrientation(const ROSCommon_msgs::Geometry_msgs_Quaternion &orientation) { idl_Visualization_msgs_InteractiveMarkerControl.orientation = orientation; return *this; }
	
	// getter and setter for element Orientation_mode
	inline unsigned char getOrientation_mode() const { return idl_Visualization_msgs_InteractiveMarkerControl.orientation_mode; }
	inline Visualization_msgs_InteractiveMarkerControlCore& setOrientation_mode(const unsigned char &orientation_mode) { idl_Visualization_msgs_InteractiveMarkerControl.orientation_mode = orientation_mode; return *this; }
	
	// getter and setter for element Interaction_mode
	inline unsigned char getInteraction_mode() const { return idl_Visualization_msgs_InteractiveMarkerControl.interaction_mode; }
	inline Visualization_msgs_InteractiveMarkerControlCore& setInteraction_mode(const unsigned char &interaction_mode) { idl_Visualization_msgs_InteractiveMarkerControl.interaction_mode = interaction_mode; return *this; }
	
	// getter and setter for element Always_visible
	inline bool getAlways_visible() const { return idl_Visualization_msgs_InteractiveMarkerControl.always_visible; }
	inline Visualization_msgs_InteractiveMarkerControlCore& setAlways_visible(const bool &always_visible) { idl_Visualization_msgs_InteractiveMarkerControl.always_visible = always_visible; return *this; }
	
	// getter and setter for element Markers
	/**
	 * Getter methods for element idl_Visualization_msgs_InteractiveMarkerControl.markers of type vector<ROSCommon_msgs::Visualization_msgs_Marker>
	 */
	inline std::vector<ROSCommon_msgs::Visualization_msgs_Marker> getMarkersCopy() const { 
		return std::vector<ROSCommon_msgs::Visualization_msgs_Marker>(idl_Visualization_msgs_InteractiveMarkerControl.markers.begin(), idl_Visualization_msgs_InteractiveMarkerControl.markers.end());
	}
	inline ROSCommon_msgs::Visualization_msgs_Marker getMarkersElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Visualization_msgs_Marker(idl_Visualization_msgs_InteractiveMarkerControl.markers[pos]);
	}
	inline size_t getMarkersSize() const { return idl_Visualization_msgs_InteractiveMarkerControl.markers.size(); }
	inline bool isMarkersEmpty() const { return idl_Visualization_msgs_InteractiveMarkerControl.markers.empty(); }
	/**
	 * Setter methods for idl_Visualization_msgs_InteractiveMarkerControl.markers of type vector<ROSCommon_msgs::Visualization_msgs_Marker>
	 */
	inline Visualization_msgs_InteractiveMarkerControlCore& setMarkers(const std::vector<ROSCommon_msgs::Visualization_msgs_Marker> &markers) { 
		idl_Visualization_msgs_InteractiveMarkerControl.markers.assign(markers.begin(), markers.end());
		return *this;
	}
	inline bool setMarkersElemAtPos(const size_t &pos, const ROSCommon_msgs::Visualization_msgs_Marker &elem) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerControl.markers.size()) {
			idl_Visualization_msgs_InteractiveMarkerControl.markers[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertMarkersVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Visualization_msgs_Marker> &data) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerControl.markers.size()) {
			idl_Visualization_msgs_InteractiveMarkerControl.markers.insert(idl_Visualization_msgs_InteractiveMarkerControl.markers.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeMarkers(const size_t &size) { idl_Visualization_msgs_InteractiveMarkerControl.markers.resize(size); }
	inline bool eraseMarkersElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Visualization_msgs_InteractiveMarkerControl.markers.size() ) {
			idl_Visualization_msgs_InteractiveMarkerControl.markers.erase(idl_Visualization_msgs_InteractiveMarkerControl.markers.begin()+pos, idl_Visualization_msgs_InteractiveMarkerControl.markers.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearMarkers() { idl_Visualization_msgs_InteractiveMarkerControl.markers.clear(); }
	
	// getter and setter for element Independent_marker_orientation
	inline bool getIndependent_marker_orientation() const { return idl_Visualization_msgs_InteractiveMarkerControl.independent_marker_orientation; }
	inline Visualization_msgs_InteractiveMarkerControlCore& setIndependent_marker_orientation(const bool &independent_marker_orientation) { idl_Visualization_msgs_InteractiveMarkerControl.independent_marker_orientation = independent_marker_orientation; return *this; }
	
	// getter and setter for element Description
	inline std::string getDescription() const { return idl_Visualization_msgs_InteractiveMarkerControl.description; }
	inline Visualization_msgs_InteractiveMarkerControlCore& setDescription(const std::string &description) { idl_Visualization_msgs_InteractiveMarkerControl.description = description; return *this; }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKERCONTROL_CORE_H_ */
