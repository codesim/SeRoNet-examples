//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_ImuCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Sensor_msgs_ImuACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Sensor_msgs_ImuCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Sensor_msgs_ImuCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_Imu.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Quaternion(idl_Sensor_msgs_Imu.orientation)
		ROSCommon_msgs::Geometry_msgs_Quaternion::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Vector3(idl_Sensor_msgs_Imu.angular_velocity)
		ROSCommon_msgs::Geometry_msgs_Vector3::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Vector3(idl_Sensor_msgs_Imu.linear_acceleration)
		ROSCommon_msgs::Geometry_msgs_Vector3::getAllHashValues(hashes);
	}
	
	void Sensor_msgs_ImuCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Sensor_msgs_ImuCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_Imu.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Quaternion(idl_Sensor_msgs_Imu.orientation)
		ROSCommon_msgs::Geometry_msgs_Quaternion::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Vector3(idl_Sensor_msgs_Imu.angular_velocity)
		ROSCommon_msgs::Geometry_msgs_Vector3::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Vector3(idl_Sensor_msgs_Imu.linear_acceleration)
		ROSCommon_msgs::Geometry_msgs_Vector3::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Sensor_msgs_ImuCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		seed += ROSCommon_msgs::Geometry_msgs_Quaternion::generateDataHash(data.orientation);
		std::vector<ACE_CDR::Double>::const_iterator data_orientation_covarianceIt;
		for(data_orientation_covarianceIt=data.orientation_covariance.begin(); data_orientation_covarianceIt!=data.orientation_covariance.end(); data_orientation_covarianceIt++) {
			boost::hash_combine(seed, *data_orientation_covarianceIt);
		}
		seed += ROSCommon_msgs::Geometry_msgs_Vector3::generateDataHash(data.angular_velocity);
		std::vector<ACE_CDR::Double>::const_iterator data_angular_velocity_covarianceIt;
		for(data_angular_velocity_covarianceIt=data.angular_velocity_covariance.begin(); data_angular_velocity_covarianceIt!=data.angular_velocity_covariance.end(); data_angular_velocity_covarianceIt++) {
			boost::hash_combine(seed, *data_angular_velocity_covarianceIt);
		}
		seed += ROSCommon_msgs::Geometry_msgs_Vector3::generateDataHash(data.linear_acceleration);
		std::vector<ACE_CDR::Double>::const_iterator data_linear_acceleration_covarianceIt;
		for(data_linear_acceleration_covarianceIt=data.linear_acceleration_covariance.begin(); data_linear_acceleration_covarianceIt!=data.linear_acceleration_covariance.end(); data_linear_acceleration_covarianceIt++) {
			boost::hash_combine(seed, *data_linear_acceleration_covarianceIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	Sensor_msgs_ImuCore::Sensor_msgs_ImuCore()
	:	idl_Sensor_msgs_Imu()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setOrientation(ROSCommon_msgs::Geometry_msgs_Quaternion());
		setOrientation_covariance(std::vector<double>());
		setAngular_velocity(ROSCommon_msgs::Geometry_msgs_Vector3());
		setAngular_velocity_covariance(std::vector<double>());
		setLinear_acceleration(ROSCommon_msgs::Geometry_msgs_Vector3());
		setLinear_acceleration_covariance(std::vector<double>());
	}
	
	Sensor_msgs_ImuCore::Sensor_msgs_ImuCore(const DATATYPE &data)
	:	idl_Sensor_msgs_Imu(data)
	{  }

	Sensor_msgs_ImuCore::~Sensor_msgs_ImuCore()
	{  }
	
	void Sensor_msgs_ImuCore::to_ostream(std::ostream &os) const
	{
	  os << "Sensor_msgs_Imu(";
	  getHeader().to_ostream(os);
	  getOrientation().to_ostream(os);
	  std::vector<double>::const_iterator orientation_covarianceIt;
	  std::vector<double> orientation_covarianceList = getOrientation_covarianceCopy();
	  for(orientation_covarianceIt=orientation_covarianceList.begin(); orientation_covarianceIt!=orientation_covarianceList.end(); orientation_covarianceIt++) {
	  	os << *orientation_covarianceIt << " ";
	  }
	  getAngular_velocity().to_ostream(os);
	  std::vector<double>::const_iterator angular_velocity_covarianceIt;
	  std::vector<double> angular_velocity_covarianceList = getAngular_velocity_covarianceCopy();
	  for(angular_velocity_covarianceIt=angular_velocity_covarianceList.begin(); angular_velocity_covarianceIt!=angular_velocity_covarianceList.end(); angular_velocity_covarianceIt++) {
	  	os << *angular_velocity_covarianceIt << " ";
	  }
	  getLinear_acceleration().to_ostream(os);
	  std::vector<double>::const_iterator linear_acceleration_covarianceIt;
	  std::vector<double> linear_acceleration_covarianceList = getLinear_acceleration_covarianceCopy();
	  for(linear_acceleration_covarianceIt=linear_acceleration_covarianceList.begin(); linear_acceleration_covarianceIt!=linear_acceleration_covarianceList.end(); linear_acceleration_covarianceIt++) {
	  	os << *linear_acceleration_covarianceIt << " ";
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void Sensor_msgs_ImuCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		os << indent << "<orientation>";
		getOrientation().to_xml(os, indent);
		os << indent << "</orientation>";
		std::vector<double>::const_iterator orientation_covarianceIt;
		std::vector<double> orientation_covarianceList = getOrientation_covarianceCopy();
		counter = 0;
		os << indent << "<orientation_covarianceList n=\"" << orientation_covarianceList.size() << "\">";
		for(orientation_covarianceIt=orientation_covarianceList.begin(); orientation_covarianceIt!=orientation_covarianceList.end(); orientation_covarianceIt++) {
			os << indent << "<orientation_covariance i=\"" << counter++ << "\">" << *orientation_covarianceIt << "</orientation_covariance>";
		}
		os << indent << "</orientation_covarianceList>";
		os << indent << "<angular_velocity>";
		getAngular_velocity().to_xml(os, indent);
		os << indent << "</angular_velocity>";
		std::vector<double>::const_iterator angular_velocity_covarianceIt;
		std::vector<double> angular_velocity_covarianceList = getAngular_velocity_covarianceCopy();
		counter = 0;
		os << indent << "<angular_velocity_covarianceList n=\"" << angular_velocity_covarianceList.size() << "\">";
		for(angular_velocity_covarianceIt=angular_velocity_covarianceList.begin(); angular_velocity_covarianceIt!=angular_velocity_covarianceList.end(); angular_velocity_covarianceIt++) {
			os << indent << "<angular_velocity_covariance i=\"" << counter++ << "\">" << *angular_velocity_covarianceIt << "</angular_velocity_covariance>";
		}
		os << indent << "</angular_velocity_covarianceList>";
		os << indent << "<linear_acceleration>";
		getLinear_acceleration().to_xml(os, indent);
		os << indent << "</linear_acceleration>";
		std::vector<double>::const_iterator linear_acceleration_covarianceIt;
		std::vector<double> linear_acceleration_covarianceList = getLinear_acceleration_covarianceCopy();
		counter = 0;
		os << indent << "<linear_acceleration_covarianceList n=\"" << linear_acceleration_covarianceList.size() << "\">";
		for(linear_acceleration_covarianceIt=linear_acceleration_covarianceList.begin(); linear_acceleration_covarianceIt!=linear_acceleration_covarianceList.end(); linear_acceleration_covarianceIt++) {
			os << indent << "<linear_acceleration_covariance i=\"" << counter++ << "\">" << *linear_acceleration_covarianceIt << "</linear_acceleration_covariance>";
		}
		os << indent << "</linear_acceleration_covarianceList>";
	}
	
	// restore from xml stream
	void Sensor_msgs_ImuCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_orientation("<orientation>");
		static const Smart::KnuthMorrisPratt kmp_orientation_covarianceList("<orientation_covarianceList n=\"");
		static const Smart::KnuthMorrisPratt kmp_orientation_covariance("\">");
		static const Smart::KnuthMorrisPratt kmp_angular_velocity("<angular_velocity>");
		static const Smart::KnuthMorrisPratt kmp_angular_velocity_covarianceList("<angular_velocity_covarianceList n=\"");
		static const Smart::KnuthMorrisPratt kmp_angular_velocity_covariance("\">");
		static const Smart::KnuthMorrisPratt kmp_linear_acceleration("<linear_acceleration>");
		static const Smart::KnuthMorrisPratt kmp_linear_acceleration_covarianceList("<linear_acceleration_covarianceList n=\"");
		static const Smart::KnuthMorrisPratt kmp_linear_acceleration_covariance("\">");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_orientation.search(is)) {
			ROSCommon_msgs::Geometry_msgs_Quaternion orientationItem;
			orientationItem.from_xml(is);
			setOrientation(orientationItem);
		}
		if(kmp_orientation_covarianceList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double orientation_covarianceItem;
			std::vector<double> orientation_covarianceList;
			kmp_orientation_covariance.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_orientation_covariance.search(is)) {
					is >> orientation_covarianceItem;
					orientation_covarianceList.push_back(orientation_covarianceItem);
				}
			}
			setOrientation_covariance(orientation_covarianceList);
		}
		if(kmp_angular_velocity.search(is)) {
			ROSCommon_msgs::Geometry_msgs_Vector3 angular_velocityItem;
			angular_velocityItem.from_xml(is);
			setAngular_velocity(angular_velocityItem);
		}
		if(kmp_angular_velocity_covarianceList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double angular_velocity_covarianceItem;
			std::vector<double> angular_velocity_covarianceList;
			kmp_angular_velocity_covariance.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_angular_velocity_covariance.search(is)) {
					is >> angular_velocity_covarianceItem;
					angular_velocity_covarianceList.push_back(angular_velocity_covarianceItem);
				}
			}
			setAngular_velocity_covariance(angular_velocity_covarianceList);
		}
		if(kmp_linear_acceleration.search(is)) {
			ROSCommon_msgs::Geometry_msgs_Vector3 linear_accelerationItem;
			linear_accelerationItem.from_xml(is);
			setLinear_acceleration(linear_accelerationItem);
		}
		if(kmp_linear_acceleration_covarianceList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double linear_acceleration_covarianceItem;
			std::vector<double> linear_acceleration_covarianceList;
			kmp_linear_acceleration_covariance.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_linear_acceleration_covariance.search(is)) {
					is >> linear_acceleration_covarianceItem;
					linear_acceleration_covarianceList.push_back(linear_acceleration_covarianceItem);
				}
			}
			setLinear_acceleration_covariance(linear_acceleration_covarianceList);
		}
	}
	
	/*
	void Sensor_msgs_ImuCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Sensor_msgs_ImuACE.hh)
		cdr << idl_Sensor_msgs_Imu;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Sensor_msgs_Imu);
		cdr << data_hash;
		// std::cout << "Sensor_msgs_ImuCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Sensor_msgs_ImuCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Sensor_msgs_ImuACE.hh)
		cdr >> idl_Sensor_msgs_Imu;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Sensor_msgs_Imu);
		assert(data_hash == own_hash);
		// std::cout << "Sensor_msgs_ImuCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
