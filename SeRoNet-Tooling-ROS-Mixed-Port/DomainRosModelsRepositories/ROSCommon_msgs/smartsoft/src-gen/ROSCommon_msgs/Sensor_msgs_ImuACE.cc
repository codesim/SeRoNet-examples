//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_ImuACE.hh"
#include <ace/SString.h>
#include "ROSCommon_msgs/Geometry_msgs_Vector3ACE.hh"
#include "ROSCommon_msgs/Geometry_msgs_QuaternionACE.hh"
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Sensor_msgs_Imu
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Sensor_msgs_Imu &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element orientation
	good_bit = good_bit && cdr << data.orientation;
	// serialize list-element orientation_covariance
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.orientation_covariance.size());
	good_bit = good_bit && cdr.write_double_array(data.orientation_covariance.data(), data.orientation_covariance.size());
	// serialize list-element angular_velocity
	good_bit = good_bit && cdr << data.angular_velocity;
	// serialize list-element angular_velocity_covariance
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.angular_velocity_covariance.size());
	good_bit = good_bit && cdr.write_double_array(data.angular_velocity_covariance.data(), data.angular_velocity_covariance.size());
	// serialize list-element linear_acceleration
	good_bit = good_bit && cdr << data.linear_acceleration;
	// serialize list-element linear_acceleration_covariance
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.linear_acceleration_covariance.size());
	good_bit = good_bit && cdr.write_double_array(data.linear_acceleration_covariance.data(), data.linear_acceleration_covariance.size());
	
	return good_bit;
}

// de-serialization operator for element Sensor_msgs_Imu
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Sensor_msgs_Imu &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize type element orientation
	good_bit = good_bit && cdr >> data.orientation;
	// deserialize list-type element orientation_covariance
	ACE_CDR::ULong data_orientation_covarianceNbr;
	good_bit = good_bit && cdr >> data_orientation_covarianceNbr;
	data.orientation_covariance.resize(data_orientation_covarianceNbr);
	good_bit = good_bit && cdr.read_double_array(data.orientation_covariance.data(), data_orientation_covarianceNbr);
	// deserialize type element angular_velocity
	good_bit = good_bit && cdr >> data.angular_velocity;
	// deserialize list-type element angular_velocity_covariance
	ACE_CDR::ULong data_angular_velocity_covarianceNbr;
	good_bit = good_bit && cdr >> data_angular_velocity_covarianceNbr;
	data.angular_velocity_covariance.resize(data_angular_velocity_covarianceNbr);
	good_bit = good_bit && cdr.read_double_array(data.angular_velocity_covariance.data(), data_angular_velocity_covarianceNbr);
	// deserialize type element linear_acceleration
	good_bit = good_bit && cdr >> data.linear_acceleration;
	// deserialize list-type element linear_acceleration_covariance
	ACE_CDR::ULong data_linear_acceleration_covarianceNbr;
	good_bit = good_bit && cdr >> data_linear_acceleration_covarianceNbr;
	data.linear_acceleration_covariance.resize(data_linear_acceleration_covarianceNbr);
	good_bit = good_bit && cdr.read_double_array(data.linear_acceleration_covariance.data(), data_linear_acceleration_covarianceNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject Sensor_msgs_Imu
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Sensor_msgs_Imu &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Sensor_msgs_Imu
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Sensor_msgs_Imu &obj)
{
	return cdr >> obj.set();
}
