//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SENSOR_MSGS_MULTIECHOLASERSCAN_CORE_H_
#define ROSCOMMON_MSGS_SENSOR_MSGS_MULTIECHOLASERSCAN_CORE_H_

#include "ROSCommon_msgs/Sensor_msgs_MultiEchoLaserScanData.hh"
#include "ROSRos_core/Std_msgs_Header.hh"
#include "ROSCommon_msgs/Sensor_msgs_LaserEcho.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Sensor_msgs_MultiEchoLaserScanCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Sensor_msgs_MultiEchoLaserScan idl_Sensor_msgs_MultiEchoLaserScan;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Sensor_msgs_MultiEchoLaserScan DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Sensor_msgs_MultiEchoLaserScanCore();
	Sensor_msgs_MultiEchoLaserScanCore(const DATATYPE &data);
	// default destructor
	virtual ~Sensor_msgs_MultiEchoLaserScanCore();
	
	const DATATYPE& get() const { return idl_Sensor_msgs_MultiEchoLaserScan; }
	operator const DATATYPE&() const { return idl_Sensor_msgs_MultiEchoLaserScan; }
	DATATYPE& set() { return idl_Sensor_msgs_MultiEchoLaserScan; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Sensor_msgs_MultiEchoLaserScan"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Header
	inline ROSRos_core::Std_msgs_Header getHeader() const { return ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_MultiEchoLaserScan.header); }
	inline Sensor_msgs_MultiEchoLaserScanCore& setHeader(const ROSRos_core::Std_msgs_Header &header) { idl_Sensor_msgs_MultiEchoLaserScan.header = header; return *this; }
	
	// getter and setter for element Angle_min
	inline float getAngle_min() const { return idl_Sensor_msgs_MultiEchoLaserScan.angle_min; }
	inline Sensor_msgs_MultiEchoLaserScanCore& setAngle_min(const float &angle_min) { idl_Sensor_msgs_MultiEchoLaserScan.angle_min = angle_min; return *this; }
	
	// getter and setter for element Angle_max
	inline float getAngle_max() const { return idl_Sensor_msgs_MultiEchoLaserScan.angle_max; }
	inline Sensor_msgs_MultiEchoLaserScanCore& setAngle_max(const float &angle_max) { idl_Sensor_msgs_MultiEchoLaserScan.angle_max = angle_max; return *this; }
	
	// getter and setter for element Angle_increment
	inline float getAngle_increment() const { return idl_Sensor_msgs_MultiEchoLaserScan.angle_increment; }
	inline Sensor_msgs_MultiEchoLaserScanCore& setAngle_increment(const float &angle_increment) { idl_Sensor_msgs_MultiEchoLaserScan.angle_increment = angle_increment; return *this; }
	
	// getter and setter for element Time_increment
	inline float getTime_increment() const { return idl_Sensor_msgs_MultiEchoLaserScan.time_increment; }
	inline Sensor_msgs_MultiEchoLaserScanCore& setTime_increment(const float &time_increment) { idl_Sensor_msgs_MultiEchoLaserScan.time_increment = time_increment; return *this; }
	
	// getter and setter for element Scan_time
	inline float getScan_time() const { return idl_Sensor_msgs_MultiEchoLaserScan.scan_time; }
	inline Sensor_msgs_MultiEchoLaserScanCore& setScan_time(const float &scan_time) { idl_Sensor_msgs_MultiEchoLaserScan.scan_time = scan_time; return *this; }
	
	// getter and setter for element Range_min
	inline float getRange_min() const { return idl_Sensor_msgs_MultiEchoLaserScan.range_min; }
	inline Sensor_msgs_MultiEchoLaserScanCore& setRange_min(const float &range_min) { idl_Sensor_msgs_MultiEchoLaserScan.range_min = range_min; return *this; }
	
	// getter and setter for element Range_max
	inline float getRange_max() const { return idl_Sensor_msgs_MultiEchoLaserScan.range_max; }
	inline Sensor_msgs_MultiEchoLaserScanCore& setRange_max(const float &range_max) { idl_Sensor_msgs_MultiEchoLaserScan.range_max = range_max; return *this; }
	
	// getter and setter for element Ranges
	/**
	 * Getter methods for element idl_Sensor_msgs_MultiEchoLaserScan.ranges of type vector<ROSCommon_msgs::Sensor_msgs_LaserEcho>
	 */
	inline std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho> getRangesCopy() const { 
		return std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho>(idl_Sensor_msgs_MultiEchoLaserScan.ranges.begin(), idl_Sensor_msgs_MultiEchoLaserScan.ranges.end());
	}
	inline ROSCommon_msgs::Sensor_msgs_LaserEcho getRangesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Sensor_msgs_LaserEcho(idl_Sensor_msgs_MultiEchoLaserScan.ranges[pos]);
	}
	inline size_t getRangesSize() const { return idl_Sensor_msgs_MultiEchoLaserScan.ranges.size(); }
	inline bool isRangesEmpty() const { return idl_Sensor_msgs_MultiEchoLaserScan.ranges.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_MultiEchoLaserScan.ranges of type vector<ROSCommon_msgs::Sensor_msgs_LaserEcho>
	 */
	inline Sensor_msgs_MultiEchoLaserScanCore& setRanges(const std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho> &ranges) { 
		idl_Sensor_msgs_MultiEchoLaserScan.ranges.assign(ranges.begin(), ranges.end());
		return *this;
	}
	inline bool setRangesElemAtPos(const size_t &pos, const ROSCommon_msgs::Sensor_msgs_LaserEcho &elem) {
		if(pos < idl_Sensor_msgs_MultiEchoLaserScan.ranges.size()) {
			idl_Sensor_msgs_MultiEchoLaserScan.ranges[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertRangesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho> &data) {
		if(pos < idl_Sensor_msgs_MultiEchoLaserScan.ranges.size()) {
			idl_Sensor_msgs_MultiEchoLaserScan.ranges.insert(idl_Sensor_msgs_MultiEchoLaserScan.ranges.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeRanges(const size_t &size) { idl_Sensor_msgs_MultiEchoLaserScan.ranges.resize(size); }
	inline bool eraseRangesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_MultiEchoLaserScan.ranges.size() ) {
			idl_Sensor_msgs_MultiEchoLaserScan.ranges.erase(idl_Sensor_msgs_MultiEchoLaserScan.ranges.begin()+pos, idl_Sensor_msgs_MultiEchoLaserScan.ranges.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearRanges() { idl_Sensor_msgs_MultiEchoLaserScan.ranges.clear(); }
	
	// getter and setter for element Intensities
	/**
	 * Getter methods for element idl_Sensor_msgs_MultiEchoLaserScan.intensities of type vector<ROSCommon_msgs::Sensor_msgs_LaserEcho>
	 */
	inline std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho> getIntensitiesCopy() const { 
		return std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho>(idl_Sensor_msgs_MultiEchoLaserScan.intensities.begin(), idl_Sensor_msgs_MultiEchoLaserScan.intensities.end());
	}
	inline ROSCommon_msgs::Sensor_msgs_LaserEcho getIntensitiesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Sensor_msgs_LaserEcho(idl_Sensor_msgs_MultiEchoLaserScan.intensities[pos]);
	}
	inline size_t getIntensitiesSize() const { return idl_Sensor_msgs_MultiEchoLaserScan.intensities.size(); }
	inline bool isIntensitiesEmpty() const { return idl_Sensor_msgs_MultiEchoLaserScan.intensities.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_MultiEchoLaserScan.intensities of type vector<ROSCommon_msgs::Sensor_msgs_LaserEcho>
	 */
	inline Sensor_msgs_MultiEchoLaserScanCore& setIntensities(const std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho> &intensities) { 
		idl_Sensor_msgs_MultiEchoLaserScan.intensities.assign(intensities.begin(), intensities.end());
		return *this;
	}
	inline bool setIntensitiesElemAtPos(const size_t &pos, const ROSCommon_msgs::Sensor_msgs_LaserEcho &elem) {
		if(pos < idl_Sensor_msgs_MultiEchoLaserScan.intensities.size()) {
			idl_Sensor_msgs_MultiEchoLaserScan.intensities[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertIntensitiesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Sensor_msgs_LaserEcho> &data) {
		if(pos < idl_Sensor_msgs_MultiEchoLaserScan.intensities.size()) {
			idl_Sensor_msgs_MultiEchoLaserScan.intensities.insert(idl_Sensor_msgs_MultiEchoLaserScan.intensities.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeIntensities(const size_t &size) { idl_Sensor_msgs_MultiEchoLaserScan.intensities.resize(size); }
	inline bool eraseIntensitiesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_MultiEchoLaserScan.intensities.size() ) {
			idl_Sensor_msgs_MultiEchoLaserScan.intensities.erase(idl_Sensor_msgs_MultiEchoLaserScan.intensities.begin()+pos, idl_Sensor_msgs_MultiEchoLaserScan.intensities.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearIntensities() { idl_Sensor_msgs_MultiEchoLaserScan.intensities.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_SENSOR_MSGS_MULTIECHOLASERSCAN_CORE_H_ */
