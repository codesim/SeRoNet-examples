//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_MultiEchoLaserScanACE.hh"
#include <ace/SString.h>
#include "ROSCommon_msgs/Sensor_msgs_LaserEchoACE.hh"
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Sensor_msgs_MultiEchoLaserScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Sensor_msgs_MultiEchoLaserScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element angle_min
	good_bit = good_bit && cdr.write_float(data.angle_min);
	// serialize list-element angle_max
	good_bit = good_bit && cdr.write_float(data.angle_max);
	// serialize list-element angle_increment
	good_bit = good_bit && cdr.write_float(data.angle_increment);
	// serialize list-element time_increment
	good_bit = good_bit && cdr.write_float(data.time_increment);
	// serialize list-element scan_time
	good_bit = good_bit && cdr.write_float(data.scan_time);
	// serialize list-element range_min
	good_bit = good_bit && cdr.write_float(data.range_min);
	// serialize list-element range_max
	good_bit = good_bit && cdr.write_float(data.range_max);
	// serialize list-element ranges
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.ranges.size());
	std::vector<ROSCommon_msgsIDL::Sensor_msgs_LaserEcho>::const_iterator data_rangesIt;
	for(data_rangesIt=data.ranges.begin(); data_rangesIt!=data.ranges.end(); data_rangesIt++) {
		good_bit = good_bit && cdr << *data_rangesIt;
	}
	// serialize list-element intensities
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.intensities.size());
	std::vector<ROSCommon_msgsIDL::Sensor_msgs_LaserEcho>::const_iterator data_intensitiesIt;
	for(data_intensitiesIt=data.intensities.begin(); data_intensitiesIt!=data.intensities.end(); data_intensitiesIt++) {
		good_bit = good_bit && cdr << *data_intensitiesIt;
	}
	
	return good_bit;
}

// de-serialization operator for element Sensor_msgs_MultiEchoLaserScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Sensor_msgs_MultiEchoLaserScan &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize type element angle_min
	good_bit = good_bit && cdr.read_float(data.angle_min);
	// deserialize type element angle_max
	good_bit = good_bit && cdr.read_float(data.angle_max);
	// deserialize type element angle_increment
	good_bit = good_bit && cdr.read_float(data.angle_increment);
	// deserialize type element time_increment
	good_bit = good_bit && cdr.read_float(data.time_increment);
	// deserialize type element scan_time
	good_bit = good_bit && cdr.read_float(data.scan_time);
	// deserialize type element range_min
	good_bit = good_bit && cdr.read_float(data.range_min);
	// deserialize type element range_max
	good_bit = good_bit && cdr.read_float(data.range_max);
	// deserialize list-type element ranges
	ACE_CDR::ULong data_rangesNbr;
	good_bit = good_bit && cdr >> data_rangesNbr;
	data.ranges.clear();
	ROSCommon_msgsIDL::Sensor_msgs_LaserEcho data_rangesItem;
	for(ACE_CDR::ULong i=0; i<data_rangesNbr; ++i) {
		good_bit = good_bit && cdr >> data_rangesItem;
		data.ranges.push_back(data_rangesItem);
	}
	// deserialize list-type element intensities
	ACE_CDR::ULong data_intensitiesNbr;
	good_bit = good_bit && cdr >> data_intensitiesNbr;
	data.intensities.clear();
	ROSCommon_msgsIDL::Sensor_msgs_LaserEcho data_intensitiesItem;
	for(ACE_CDR::ULong i=0; i<data_intensitiesNbr; ++i) {
		good_bit = good_bit && cdr >> data_intensitiesItem;
		data.intensities.push_back(data_intensitiesItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject Sensor_msgs_MultiEchoLaserScan
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Sensor_msgs_MultiEchoLaserScan &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Sensor_msgs_MultiEchoLaserScan
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Sensor_msgs_MultiEchoLaserScan &obj)
{
	return cdr >> obj.set();
}
