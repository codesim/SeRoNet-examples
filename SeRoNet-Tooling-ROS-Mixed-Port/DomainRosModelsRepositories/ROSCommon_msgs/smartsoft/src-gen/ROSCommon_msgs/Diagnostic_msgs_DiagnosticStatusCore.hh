//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_DIAGNOSTIC_MSGS_DIAGNOSTICSTATUS_CORE_H_
#define ROSCOMMON_MSGS_DIAGNOSTIC_MSGS_DIAGNOSTICSTATUS_CORE_H_

#include "ROSCommon_msgs/Diagnostic_msgs_DiagnosticStatusData.hh"
#include "ROSCommon_msgs/Diagnostic_msgs_KeyValue.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Diagnostic_msgs_DiagnosticStatusCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Diagnostic_msgs_DiagnosticStatus idl_Diagnostic_msgs_DiagnosticStatus;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Diagnostic_msgs_DiagnosticStatus DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Diagnostic_msgs_DiagnosticStatusCore();
	Diagnostic_msgs_DiagnosticStatusCore(const DATATYPE &data);
	// default destructor
	virtual ~Diagnostic_msgs_DiagnosticStatusCore();
	
	const DATATYPE& get() const { return idl_Diagnostic_msgs_DiagnosticStatus; }
	operator const DATATYPE&() const { return idl_Diagnostic_msgs_DiagnosticStatus; }
	DATATYPE& set() { return idl_Diagnostic_msgs_DiagnosticStatus; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Diagnostic_msgs_DiagnosticStatus"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Level
	inline unsigned char getLevel() const { return idl_Diagnostic_msgs_DiagnosticStatus.level; }
	inline Diagnostic_msgs_DiagnosticStatusCore& setLevel(const unsigned char &level) { idl_Diagnostic_msgs_DiagnosticStatus.level = level; return *this; }
	
	// getter and setter for element Name
	inline std::string getName() const { return idl_Diagnostic_msgs_DiagnosticStatus.name; }
	inline Diagnostic_msgs_DiagnosticStatusCore& setName(const std::string &name) { idl_Diagnostic_msgs_DiagnosticStatus.name = name; return *this; }
	
	// getter and setter for element Message
	inline std::string getMessage() const { return idl_Diagnostic_msgs_DiagnosticStatus.message; }
	inline Diagnostic_msgs_DiagnosticStatusCore& setMessage(const std::string &message) { idl_Diagnostic_msgs_DiagnosticStatus.message = message; return *this; }
	
	// getter and setter for element Hardware_id
	inline std::string getHardware_id() const { return idl_Diagnostic_msgs_DiagnosticStatus.hardware_id; }
	inline Diagnostic_msgs_DiagnosticStatusCore& setHardware_id(const std::string &hardware_id) { idl_Diagnostic_msgs_DiagnosticStatus.hardware_id = hardware_id; return *this; }
	
	// getter and setter for element Values
	/**
	 * Getter methods for element idl_Diagnostic_msgs_DiagnosticStatus.values of type vector<ROSCommon_msgs::Diagnostic_msgs_KeyValue>
	 */
	inline std::vector<ROSCommon_msgs::Diagnostic_msgs_KeyValue> getValuesCopy() const { 
		return std::vector<ROSCommon_msgs::Diagnostic_msgs_KeyValue>(idl_Diagnostic_msgs_DiagnosticStatus.values.begin(), idl_Diagnostic_msgs_DiagnosticStatus.values.end());
	}
	inline ROSCommon_msgs::Diagnostic_msgs_KeyValue getValuesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Diagnostic_msgs_KeyValue(idl_Diagnostic_msgs_DiagnosticStatus.values[pos]);
	}
	inline size_t getValuesSize() const { return idl_Diagnostic_msgs_DiagnosticStatus.values.size(); }
	inline bool isValuesEmpty() const { return idl_Diagnostic_msgs_DiagnosticStatus.values.empty(); }
	/**
	 * Setter methods for idl_Diagnostic_msgs_DiagnosticStatus.values of type vector<ROSCommon_msgs::Diagnostic_msgs_KeyValue>
	 */
	inline Diagnostic_msgs_DiagnosticStatusCore& setValues(const std::vector<ROSCommon_msgs::Diagnostic_msgs_KeyValue> &values) { 
		idl_Diagnostic_msgs_DiagnosticStatus.values.assign(values.begin(), values.end());
		return *this;
	}
	inline bool setValuesElemAtPos(const size_t &pos, const ROSCommon_msgs::Diagnostic_msgs_KeyValue &elem) {
		if(pos < idl_Diagnostic_msgs_DiagnosticStatus.values.size()) {
			idl_Diagnostic_msgs_DiagnosticStatus.values[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertValuesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Diagnostic_msgs_KeyValue> &data) {
		if(pos < idl_Diagnostic_msgs_DiagnosticStatus.values.size()) {
			idl_Diagnostic_msgs_DiagnosticStatus.values.insert(idl_Diagnostic_msgs_DiagnosticStatus.values.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeValues(const size_t &size) { idl_Diagnostic_msgs_DiagnosticStatus.values.resize(size); }
	inline bool eraseValuesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Diagnostic_msgs_DiagnosticStatus.values.size() ) {
			idl_Diagnostic_msgs_DiagnosticStatus.values.erase(idl_Diagnostic_msgs_DiagnosticStatus.values.begin()+pos, idl_Diagnostic_msgs_DiagnosticStatus.values.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearValues() { idl_Diagnostic_msgs_DiagnosticStatus.values.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_DIAGNOSTIC_MSGS_DIAGNOSTICSTATUS_CORE_H_ */
