//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_JointStateACE.hh"
#include <ace/SString.h>
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Sensor_msgs_JointState
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Sensor_msgs_JointState &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element name
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.name.size());
	std::vector<std::string>::const_iterator data_nameIt;
	for(data_nameIt=data.name.begin(); data_nameIt!=data.name.end(); data_nameIt++) {
		good_bit = good_bit && cdr << ACE_CString((*data_nameIt).c_str());
	}
	// serialize list-element position
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.position.size());
	good_bit = good_bit && cdr.write_double_array(data.position.data(), data.position.size());
	// serialize list-element velocity
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.velocity.size());
	good_bit = good_bit && cdr.write_double_array(data.velocity.data(), data.velocity.size());
	// serialize list-element effort
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.effort.size());
	good_bit = good_bit && cdr.write_double_array(data.effort.data(), data.effort.size());
	
	return good_bit;
}

// de-serialization operator for element Sensor_msgs_JointState
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Sensor_msgs_JointState &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize list-type element name
	ACE_CDR::ULong data_nameNbr;
	good_bit = good_bit && cdr >> data_nameNbr;
	data.name.clear();
	ACE_CString data_nameItem;
	for(ACE_CDR::ULong i=0; i<data_nameNbr; ++i) {
		good_bit = good_bit && cdr >> data_nameItem;
		data.name.push_back(data_nameItem.c_str());
	}
	// deserialize list-type element position
	ACE_CDR::ULong data_positionNbr;
	good_bit = good_bit && cdr >> data_positionNbr;
	data.position.resize(data_positionNbr);
	good_bit = good_bit && cdr.read_double_array(data.position.data(), data_positionNbr);
	// deserialize list-type element velocity
	ACE_CDR::ULong data_velocityNbr;
	good_bit = good_bit && cdr >> data_velocityNbr;
	data.velocity.resize(data_velocityNbr);
	good_bit = good_bit && cdr.read_double_array(data.velocity.data(), data_velocityNbr);
	// deserialize list-type element effort
	ACE_CDR::ULong data_effortNbr;
	good_bit = good_bit && cdr >> data_effortNbr;
	data.effort.resize(data_effortNbr);
	good_bit = good_bit && cdr.read_double_array(data.effort.data(), data_effortNbr);
	
	return good_bit;
}

// serialization operator for CommunicationObject Sensor_msgs_JointState
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Sensor_msgs_JointState &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Sensor_msgs_JointState
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Sensor_msgs_JointState &obj)
{
	return cdr >> obj.set();
}
