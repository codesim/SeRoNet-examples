//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_GEOMETRY_MSGS_POSEWITHCOVARIANCE_CORE_H_
#define ROSCOMMON_MSGS_GEOMETRY_MSGS_POSEWITHCOVARIANCE_CORE_H_

#include "ROSCommon_msgs/Geometry_msgs_PoseWithCovarianceData.hh"
#include "ROSCommon_msgs/Geometry_msgs_Pose.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Geometry_msgs_PoseWithCovarianceCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Geometry_msgs_PoseWithCovariance idl_Geometry_msgs_PoseWithCovariance;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Geometry_msgs_PoseWithCovariance DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Geometry_msgs_PoseWithCovarianceCore();
	Geometry_msgs_PoseWithCovarianceCore(const DATATYPE &data);
	// default destructor
	virtual ~Geometry_msgs_PoseWithCovarianceCore();
	
	const DATATYPE& get() const { return idl_Geometry_msgs_PoseWithCovariance; }
	operator const DATATYPE&() const { return idl_Geometry_msgs_PoseWithCovariance; }
	DATATYPE& set() { return idl_Geometry_msgs_PoseWithCovariance; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Geometry_msgs_PoseWithCovariance"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Pose
	inline ROSCommon_msgs::Geometry_msgs_Pose getPose() const { return ROSCommon_msgs::Geometry_msgs_Pose(idl_Geometry_msgs_PoseWithCovariance.pose); }
	inline Geometry_msgs_PoseWithCovarianceCore& setPose(const ROSCommon_msgs::Geometry_msgs_Pose &pose) { idl_Geometry_msgs_PoseWithCovariance.pose = pose; return *this; }
	
	// getter and setter for element Covariance
	/**
	 * Getter methods for idl_Geometry_msgs_PoseWithCovariance.covariance of type vector<double>
	 */
	inline std::vector<double>& getCovarianceRef() { return idl_Geometry_msgs_PoseWithCovariance.covariance; }
	inline std::vector<double> getCovarianceCopy() const {
		return std::vector<double>(idl_Geometry_msgs_PoseWithCovariance.covariance.begin(), idl_Geometry_msgs_PoseWithCovariance.covariance.end());
	}
	inline double getCovarianceElemAtPos(const size_t &pos) const { return idl_Geometry_msgs_PoseWithCovariance.covariance[pos]; }
	inline size_t getCovarianceSize() const { return idl_Geometry_msgs_PoseWithCovariance.covariance.size(); }
	inline bool isCovarianceEmpty() const { return idl_Geometry_msgs_PoseWithCovariance.covariance.empty(); }
	/**
	 * Setter methods for idl_Geometry_msgs_PoseWithCovariance.covariance of type vector<double>
	 */
	inline Geometry_msgs_PoseWithCovarianceCore& setCovariance(const std::vector<double> &covariance) { idl_Geometry_msgs_PoseWithCovariance.covariance = covariance; return *this; }
	inline bool setCovarianceElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_Geometry_msgs_PoseWithCovariance.covariance.size()) {
			idl_Geometry_msgs_PoseWithCovariance.covariance[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertCovarianceVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos < idl_Geometry_msgs_PoseWithCovariance.covariance.size()) {
			idl_Geometry_msgs_PoseWithCovariance.covariance.insert(idl_Geometry_msgs_PoseWithCovariance.covariance.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeCovariance(const size_t &size) { idl_Geometry_msgs_PoseWithCovariance.covariance.resize(size); }
	inline bool eraseCovarianceElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Geometry_msgs_PoseWithCovariance.covariance.size() ) {
			idl_Geometry_msgs_PoseWithCovariance.covariance.erase(idl_Geometry_msgs_PoseWithCovariance.covariance.begin()+pos, idl_Geometry_msgs_PoseWithCovariance.covariance.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearCovariance() { idl_Geometry_msgs_PoseWithCovariance.covariance.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_GEOMETRY_MSGS_POSEWITHCOVARIANCE_CORE_H_ */
