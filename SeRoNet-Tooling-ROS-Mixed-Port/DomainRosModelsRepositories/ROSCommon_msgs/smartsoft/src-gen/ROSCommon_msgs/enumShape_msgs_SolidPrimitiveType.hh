//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SHAPE_MSGS_SOLIDPRIMITIVETYPE_ENUM_H_
#define ROSCOMMON_MSGS_SHAPE_MSGS_SOLIDPRIMITIVETYPE_ENUM_H_

#include <ROSCommon_msgs/enumShape_msgs_SolidPrimitiveTypeData.hh>

#include <string>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace ROSCommon_msgs {
	
	class Shape_msgs_SolidPrimitiveType {
	private:
		ROSCommon_msgsIDL::Shape_msgs_SolidPrimitiveType value;
		
	public:
		enum ENUM_Shape_msgs_SolidPrimitiveType {
			ENUM_VALUE_UNDEFINED = 0,
			BOX = 1,
			SPHERE = 2,
			CYLINDER = 3,
			CONE = 4,
			BOX_X = 5,
			BOX_Y = 6,
			BOX_Z = 7,
			SPHERE_RADIUS = 8,
			CYLINDER_HEIGHT = 9,
			CYLINDER_RADIUS = 10,
			CONE_HEIGHT = 11,
			CONE_RADIUS = 12
		};
		
		// default constructor
		Shape_msgs_SolidPrimitiveType() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		Shape_msgs_SolidPrimitiveType(ENUM_Shape_msgs_SolidPrimitiveType e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type
		Shape_msgs_SolidPrimitiveType(ROSCommon_msgsIDL::Shape_msgs_SolidPrimitiveType e) {
			value = e;
		}
		
		//const ROSCommon_msgsIDL::Shape_msgs_SolidPrimitiveType& get() const { return value; }
		
		// ENUM operator
		operator ENUM_Shape_msgs_SolidPrimitiveType() const {
			return static_cast<ENUM_Shape_msgs_SolidPrimitiveType>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_Shape_msgs_SolidPrimitiveType t) const {
			return this->value == t;
		}
		
		std::string to_string() const {
			std::string result = "";
			switch (value) {
				case BOX:
					result = "Shape_msgs_SolidPrimitiveType::BOX";
					break;
				case SPHERE:
					result = "Shape_msgs_SolidPrimitiveType::SPHERE";
					break;
				case CYLINDER:
					result = "Shape_msgs_SolidPrimitiveType::CYLINDER";
					break;
				case CONE:
					result = "Shape_msgs_SolidPrimitiveType::CONE";
					break;
				case BOX_X:
					result = "Shape_msgs_SolidPrimitiveType::BOX_X";
					break;
				case BOX_Y:
					result = "Shape_msgs_SolidPrimitiveType::BOX_Y";
					break;
				case BOX_Z:
					result = "Shape_msgs_SolidPrimitiveType::BOX_Z";
					break;
				case SPHERE_RADIUS:
					result = "Shape_msgs_SolidPrimitiveType::SPHERE_RADIUS";
					break;
				case CYLINDER_HEIGHT:
					result = "Shape_msgs_SolidPrimitiveType::CYLINDER_HEIGHT";
					break;
				case CYLINDER_RADIUS:
					result = "Shape_msgs_SolidPrimitiveType::CYLINDER_RADIUS";
					break;
				case CONE_HEIGHT:
					result = "Shape_msgs_SolidPrimitiveType::CONE_HEIGHT";
					break;
				case CONE_RADIUS:
					result = "Shape_msgs_SolidPrimitiveType::CONE_RADIUS";
					break;
				default:
					result = "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const Shape_msgs_SolidPrimitiveType &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
