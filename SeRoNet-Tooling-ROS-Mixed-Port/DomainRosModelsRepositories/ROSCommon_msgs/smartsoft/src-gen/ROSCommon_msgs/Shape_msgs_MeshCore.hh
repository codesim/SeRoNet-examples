//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SHAPE_MSGS_MESH_CORE_H_
#define ROSCOMMON_MSGS_SHAPE_MSGS_MESH_CORE_H_

#include "ROSCommon_msgs/Shape_msgs_MeshData.hh"
#include "ROSCommon_msgs/Shape_msgs_MeshTriangle.hh"
#include "ROSCommon_msgs/Geometry_msgs_Point.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Shape_msgs_MeshCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Shape_msgs_Mesh idl_Shape_msgs_Mesh;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Shape_msgs_Mesh DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Shape_msgs_MeshCore();
	Shape_msgs_MeshCore(const DATATYPE &data);
	// default destructor
	virtual ~Shape_msgs_MeshCore();
	
	const DATATYPE& get() const { return idl_Shape_msgs_Mesh; }
	operator const DATATYPE&() const { return idl_Shape_msgs_Mesh; }
	DATATYPE& set() { return idl_Shape_msgs_Mesh; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Shape_msgs_Mesh"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Triangles
	/**
	 * Getter methods for element idl_Shape_msgs_Mesh.triangles of type vector<ROSCommon_msgs::Shape_msgs_MeshTriangle>
	 */
	inline std::vector<ROSCommon_msgs::Shape_msgs_MeshTriangle> getTrianglesCopy() const { 
		return std::vector<ROSCommon_msgs::Shape_msgs_MeshTriangle>(idl_Shape_msgs_Mesh.triangles.begin(), idl_Shape_msgs_Mesh.triangles.end());
	}
	inline ROSCommon_msgs::Shape_msgs_MeshTriangle getTrianglesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Shape_msgs_MeshTriangle(idl_Shape_msgs_Mesh.triangles[pos]);
	}
	inline size_t getTrianglesSize() const { return idl_Shape_msgs_Mesh.triangles.size(); }
	inline bool isTrianglesEmpty() const { return idl_Shape_msgs_Mesh.triangles.empty(); }
	/**
	 * Setter methods for idl_Shape_msgs_Mesh.triangles of type vector<ROSCommon_msgs::Shape_msgs_MeshTriangle>
	 */
	inline Shape_msgs_MeshCore& setTriangles(const std::vector<ROSCommon_msgs::Shape_msgs_MeshTriangle> &triangles) { 
		idl_Shape_msgs_Mesh.triangles.assign(triangles.begin(), triangles.end());
		return *this;
	}
	inline bool setTrianglesElemAtPos(const size_t &pos, const ROSCommon_msgs::Shape_msgs_MeshTriangle &elem) {
		if(pos < idl_Shape_msgs_Mesh.triangles.size()) {
			idl_Shape_msgs_Mesh.triangles[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertTrianglesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Shape_msgs_MeshTriangle> &data) {
		if(pos < idl_Shape_msgs_Mesh.triangles.size()) {
			idl_Shape_msgs_Mesh.triangles.insert(idl_Shape_msgs_Mesh.triangles.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTriangles(const size_t &size) { idl_Shape_msgs_Mesh.triangles.resize(size); }
	inline bool eraseTrianglesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Shape_msgs_Mesh.triangles.size() ) {
			idl_Shape_msgs_Mesh.triangles.erase(idl_Shape_msgs_Mesh.triangles.begin()+pos, idl_Shape_msgs_Mesh.triangles.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTriangles() { idl_Shape_msgs_Mesh.triangles.clear(); }
	
	// getter and setter for element Vertices
	/**
	 * Getter methods for element idl_Shape_msgs_Mesh.vertices of type vector<ROSCommon_msgs::Geometry_msgs_Point>
	 */
	inline std::vector<ROSCommon_msgs::Geometry_msgs_Point> getVerticesCopy() const { 
		return std::vector<ROSCommon_msgs::Geometry_msgs_Point>(idl_Shape_msgs_Mesh.vertices.begin(), idl_Shape_msgs_Mesh.vertices.end());
	}
	inline ROSCommon_msgs::Geometry_msgs_Point getVerticesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Geometry_msgs_Point(idl_Shape_msgs_Mesh.vertices[pos]);
	}
	inline size_t getVerticesSize() const { return idl_Shape_msgs_Mesh.vertices.size(); }
	inline bool isVerticesEmpty() const { return idl_Shape_msgs_Mesh.vertices.empty(); }
	/**
	 * Setter methods for idl_Shape_msgs_Mesh.vertices of type vector<ROSCommon_msgs::Geometry_msgs_Point>
	 */
	inline Shape_msgs_MeshCore& setVertices(const std::vector<ROSCommon_msgs::Geometry_msgs_Point> &vertices) { 
		idl_Shape_msgs_Mesh.vertices.assign(vertices.begin(), vertices.end());
		return *this;
	}
	inline bool setVerticesElemAtPos(const size_t &pos, const ROSCommon_msgs::Geometry_msgs_Point &elem) {
		if(pos < idl_Shape_msgs_Mesh.vertices.size()) {
			idl_Shape_msgs_Mesh.vertices[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertVerticesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Geometry_msgs_Point> &data) {
		if(pos < idl_Shape_msgs_Mesh.vertices.size()) {
			idl_Shape_msgs_Mesh.vertices.insert(idl_Shape_msgs_Mesh.vertices.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeVertices(const size_t &size) { idl_Shape_msgs_Mesh.vertices.resize(size); }
	inline bool eraseVerticesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Shape_msgs_Mesh.vertices.size() ) {
			idl_Shape_msgs_Mesh.vertices.erase(idl_Shape_msgs_Mesh.vertices.begin()+pos, idl_Shape_msgs_Mesh.vertices.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearVertices() { idl_Shape_msgs_Mesh.vertices.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_SHAPE_MSGS_MESH_CORE_H_ */
