//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKER_CORE_H_
#define ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKER_CORE_H_

#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerData.hh"
#include "ROSCommon_msgs/Geometry_msgs_Pose.hh"
#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerControl.hh"
#include "ROSCommon_msgs/Visualization_msgs_MenuEntry.hh"
#include "ROSRos_core/Std_msgs_Header.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Visualization_msgs_InteractiveMarkerCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarker idl_Visualization_msgs_InteractiveMarker;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarker DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Visualization_msgs_InteractiveMarkerCore();
	Visualization_msgs_InteractiveMarkerCore(const DATATYPE &data);
	// default destructor
	virtual ~Visualization_msgs_InteractiveMarkerCore();
	
	const DATATYPE& get() const { return idl_Visualization_msgs_InteractiveMarker; }
	operator const DATATYPE&() const { return idl_Visualization_msgs_InteractiveMarker; }
	DATATYPE& set() { return idl_Visualization_msgs_InteractiveMarker; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Visualization_msgs_InteractiveMarker"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Header
	inline ROSRos_core::Std_msgs_Header getHeader() const { return ROSRos_core::Std_msgs_Header(idl_Visualization_msgs_InteractiveMarker.header); }
	inline Visualization_msgs_InteractiveMarkerCore& setHeader(const ROSRos_core::Std_msgs_Header &header) { idl_Visualization_msgs_InteractiveMarker.header = header; return *this; }
	
	// getter and setter for element Pose
	inline ROSCommon_msgs::Geometry_msgs_Pose getPose() const { return ROSCommon_msgs::Geometry_msgs_Pose(idl_Visualization_msgs_InteractiveMarker.pose); }
	inline Visualization_msgs_InteractiveMarkerCore& setPose(const ROSCommon_msgs::Geometry_msgs_Pose &pose) { idl_Visualization_msgs_InteractiveMarker.pose = pose; return *this; }
	
	// getter and setter for element Name
	inline std::string getName() const { return idl_Visualization_msgs_InteractiveMarker.name; }
	inline Visualization_msgs_InteractiveMarkerCore& setName(const std::string &name) { idl_Visualization_msgs_InteractiveMarker.name = name; return *this; }
	
	// getter and setter for element Description
	inline std::string getDescription() const { return idl_Visualization_msgs_InteractiveMarker.description; }
	inline Visualization_msgs_InteractiveMarkerCore& setDescription(const std::string &description) { idl_Visualization_msgs_InteractiveMarker.description = description; return *this; }
	
	// getter and setter for element Scale
	inline float getScale() const { return idl_Visualization_msgs_InteractiveMarker.scale; }
	inline Visualization_msgs_InteractiveMarkerCore& setScale(const float &scale) { idl_Visualization_msgs_InteractiveMarker.scale = scale; return *this; }
	
	// getter and setter for element Menu_entries
	/**
	 * Getter methods for element idl_Visualization_msgs_InteractiveMarker.menu_entries of type vector<ROSCommon_msgs::Visualization_msgs_MenuEntry>
	 */
	inline std::vector<ROSCommon_msgs::Visualization_msgs_MenuEntry> getMenu_entriesCopy() const { 
		return std::vector<ROSCommon_msgs::Visualization_msgs_MenuEntry>(idl_Visualization_msgs_InteractiveMarker.menu_entries.begin(), idl_Visualization_msgs_InteractiveMarker.menu_entries.end());
	}
	inline ROSCommon_msgs::Visualization_msgs_MenuEntry getMenu_entriesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Visualization_msgs_MenuEntry(idl_Visualization_msgs_InteractiveMarker.menu_entries[pos]);
	}
	inline size_t getMenu_entriesSize() const { return idl_Visualization_msgs_InteractiveMarker.menu_entries.size(); }
	inline bool isMenu_entriesEmpty() const { return idl_Visualization_msgs_InteractiveMarker.menu_entries.empty(); }
	/**
	 * Setter methods for idl_Visualization_msgs_InteractiveMarker.menu_entries of type vector<ROSCommon_msgs::Visualization_msgs_MenuEntry>
	 */
	inline Visualization_msgs_InteractiveMarkerCore& setMenu_entries(const std::vector<ROSCommon_msgs::Visualization_msgs_MenuEntry> &menu_entries) { 
		idl_Visualization_msgs_InteractiveMarker.menu_entries.assign(menu_entries.begin(), menu_entries.end());
		return *this;
	}
	inline bool setMenu_entriesElemAtPos(const size_t &pos, const ROSCommon_msgs::Visualization_msgs_MenuEntry &elem) {
		if(pos < idl_Visualization_msgs_InteractiveMarker.menu_entries.size()) {
			idl_Visualization_msgs_InteractiveMarker.menu_entries[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertMenu_entriesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Visualization_msgs_MenuEntry> &data) {
		if(pos < idl_Visualization_msgs_InteractiveMarker.menu_entries.size()) {
			idl_Visualization_msgs_InteractiveMarker.menu_entries.insert(idl_Visualization_msgs_InteractiveMarker.menu_entries.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeMenu_entries(const size_t &size) { idl_Visualization_msgs_InteractiveMarker.menu_entries.resize(size); }
	inline bool eraseMenu_entriesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Visualization_msgs_InteractiveMarker.menu_entries.size() ) {
			idl_Visualization_msgs_InteractiveMarker.menu_entries.erase(idl_Visualization_msgs_InteractiveMarker.menu_entries.begin()+pos, idl_Visualization_msgs_InteractiveMarker.menu_entries.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearMenu_entries() { idl_Visualization_msgs_InteractiveMarker.menu_entries.clear(); }
	
	// getter and setter for element Controls
	/**
	 * Getter methods for element idl_Visualization_msgs_InteractiveMarker.controls of type vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl>
	 */
	inline std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl> getControlsCopy() const { 
		return std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl>(idl_Visualization_msgs_InteractiveMarker.controls.begin(), idl_Visualization_msgs_InteractiveMarker.controls.end());
	}
	inline ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl getControlsElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl(idl_Visualization_msgs_InteractiveMarker.controls[pos]);
	}
	inline size_t getControlsSize() const { return idl_Visualization_msgs_InteractiveMarker.controls.size(); }
	inline bool isControlsEmpty() const { return idl_Visualization_msgs_InteractiveMarker.controls.empty(); }
	/**
	 * Setter methods for idl_Visualization_msgs_InteractiveMarker.controls of type vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl>
	 */
	inline Visualization_msgs_InteractiveMarkerCore& setControls(const std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl> &controls) { 
		idl_Visualization_msgs_InteractiveMarker.controls.assign(controls.begin(), controls.end());
		return *this;
	}
	inline bool setControlsElemAtPos(const size_t &pos, const ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl &elem) {
		if(pos < idl_Visualization_msgs_InteractiveMarker.controls.size()) {
			idl_Visualization_msgs_InteractiveMarker.controls[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertControlsVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerControl> &data) {
		if(pos < idl_Visualization_msgs_InteractiveMarker.controls.size()) {
			idl_Visualization_msgs_InteractiveMarker.controls.insert(idl_Visualization_msgs_InteractiveMarker.controls.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeControls(const size_t &size) { idl_Visualization_msgs_InteractiveMarker.controls.resize(size); }
	inline bool eraseControlsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Visualization_msgs_InteractiveMarker.controls.size() ) {
			idl_Visualization_msgs_InteractiveMarker.controls.erase(idl_Visualization_msgs_InteractiveMarker.controls.begin()+pos, idl_Visualization_msgs_InteractiveMarker.controls.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearControls() { idl_Visualization_msgs_InteractiveMarker.controls.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKER_CORE_H_ */
