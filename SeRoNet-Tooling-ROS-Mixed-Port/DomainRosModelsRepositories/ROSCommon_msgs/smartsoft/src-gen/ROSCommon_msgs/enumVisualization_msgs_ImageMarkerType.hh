//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_VISUALIZATION_MSGS_IMAGEMARKERTYPE_ENUM_H_
#define ROSCOMMON_MSGS_VISUALIZATION_MSGS_IMAGEMARKERTYPE_ENUM_H_

#include <ROSCommon_msgs/enumVisualization_msgs_ImageMarkerTypeData.hh>

#include <string>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

namespace ROSCommon_msgs {
	
	class Visualization_msgs_ImageMarkerType {
	private:
		ROSCommon_msgsIDL::Visualization_msgs_ImageMarkerType value;
		
	public:
		enum ENUM_Visualization_msgs_ImageMarkerType {
			ENUM_VALUE_UNDEFINED = 0,
			CIRCLE = 1,
			LINE_STRIP = 2,
			LINE_LIST = 3,
			POLYGON = 4,
			POINTS = 5,
			ADD = 6,
			REMOVE = 7
		};
		
		// default constructor
		Visualization_msgs_ImageMarkerType() { 
			value = ENUM_VALUE_UNDEFINED;
		}
		
		// copy constructor for enum type
		Visualization_msgs_ImageMarkerType(ENUM_Visualization_msgs_ImageMarkerType e) {
			value = static_cast<int>(e);
		}
		
		// copy constructor for IDL type
		Visualization_msgs_ImageMarkerType(ROSCommon_msgsIDL::Visualization_msgs_ImageMarkerType e) {
			value = e;
		}
		
		//const ROSCommon_msgsIDL::Visualization_msgs_ImageMarkerType& get() const { return value; }
		
		// ENUM operator
		operator ENUM_Visualization_msgs_ImageMarkerType() const {
			return static_cast<ENUM_Visualization_msgs_ImageMarkerType>(value);
		}
		
		// compare operator
		bool operator == (const ENUM_Visualization_msgs_ImageMarkerType t) const {
			return this->value == t;
		}
		
		std::string to_string() const {
			std::string result = "";
			switch (value) {
				case CIRCLE:
					result = "Visualization_msgs_ImageMarkerType::CIRCLE";
					break;
				case LINE_STRIP:
					result = "Visualization_msgs_ImageMarkerType::LINE_STRIP";
					break;
				case LINE_LIST:
					result = "Visualization_msgs_ImageMarkerType::LINE_LIST";
					break;
				case POLYGON:
					result = "Visualization_msgs_ImageMarkerType::POLYGON";
					break;
				case POINTS:
					result = "Visualization_msgs_ImageMarkerType::POINTS";
					break;
				case ADD:
					result = "Visualization_msgs_ImageMarkerType::ADD";
					break;
				case REMOVE:
					result = "Visualization_msgs_ImageMarkerType::REMOVE";
					break;
				default:
					result = "ENUM_VALUE_UNDEFINED";
					break;
			};
			return result;
		}
		
		// helper method to easily implement output stream
		void to_ostream(std::ostream &os = std::cout) const {
			os << to_string();
		}
		
		// convert to xml stream
		void to_xml(std::ostream &os, const std::string &indent = "") const {
			os << indent << "<value>" << value << "</value>";
		}
		
		// restore from xml stream
		void from_xml(std::istream &is) {
			static const Smart::KnuthMorrisPratt kmp_value("<value>");
			if(kmp_value.search(is)) {
				is >> value;
			}
		}
	
	};
	
	inline std::ostream &operator<<(std::ostream &os, const Visualization_msgs_ImageMarkerType &e)
	{
		e.to_ostream(os);
		return os;
	}
};

#endif
