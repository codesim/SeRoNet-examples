//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKERUPDATE_CORE_H_
#define ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKERUPDATE_CORE_H_

#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerUpdateData.hh"
#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerPose.hh"
#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarker.hh"

#include <iostream>
#include <string>
#include <list>
#include <algorithm> // for using std::transform

namespace ROSCommon_msgs {
	
class Visualization_msgs_InteractiveMarkerUpdateCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarkerUpdate idl_Visualization_msgs_InteractiveMarkerUpdate;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarkerUpdate DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Visualization_msgs_InteractiveMarkerUpdateCore();
	Visualization_msgs_InteractiveMarkerUpdateCore(const DATATYPE &data);
	// default destructor
	virtual ~Visualization_msgs_InteractiveMarkerUpdateCore();
	
	const DATATYPE& get() const { return idl_Visualization_msgs_InteractiveMarkerUpdate; }
	operator const DATATYPE&() const { return idl_Visualization_msgs_InteractiveMarkerUpdate; }
	DATATYPE& set() { return idl_Visualization_msgs_InteractiveMarkerUpdate; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Visualization_msgs_InteractiveMarkerUpdate"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Server_id
	inline std::string getServer_id() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.server_id; }
	inline Visualization_msgs_InteractiveMarkerUpdateCore& setServer_id(const std::string &server_id) { idl_Visualization_msgs_InteractiveMarkerUpdate.server_id = server_id; return *this; }
	
	// getter and setter for element Seq_num
	inline unsigned long int getSeq_num() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.seq_num; }
	inline Visualization_msgs_InteractiveMarkerUpdateCore& setSeq_num(const unsigned long int &seq_num) { idl_Visualization_msgs_InteractiveMarkerUpdate.seq_num = seq_num; return *this; }
	
	// getter and setter for element Type
	inline unsigned char getType() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.type; }
	inline Visualization_msgs_InteractiveMarkerUpdateCore& setType(const unsigned char &type) { idl_Visualization_msgs_InteractiveMarkerUpdate.type = type; return *this; }
	
	// getter and setter for element Markers
	/**
	 * Getter methods for element idl_Visualization_msgs_InteractiveMarkerUpdate.markers of type vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarker>
	 */
	inline std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarker> getMarkersCopy() const { 
		return std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarker>(idl_Visualization_msgs_InteractiveMarkerUpdate.markers.begin(), idl_Visualization_msgs_InteractiveMarkerUpdate.markers.end());
	}
	inline ROSCommon_msgs::Visualization_msgs_InteractiveMarker getMarkersElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Visualization_msgs_InteractiveMarker(idl_Visualization_msgs_InteractiveMarkerUpdate.markers[pos]);
	}
	inline size_t getMarkersSize() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.markers.size(); }
	inline bool isMarkersEmpty() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.markers.empty(); }
	/**
	 * Setter methods for idl_Visualization_msgs_InteractiveMarkerUpdate.markers of type vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarker>
	 */
	inline Visualization_msgs_InteractiveMarkerUpdateCore& setMarkers(const std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarker> &markers) { 
		idl_Visualization_msgs_InteractiveMarkerUpdate.markers.assign(markers.begin(), markers.end());
		return *this;
	}
	inline bool setMarkersElemAtPos(const size_t &pos, const ROSCommon_msgs::Visualization_msgs_InteractiveMarker &elem) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerUpdate.markers.size()) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.markers[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertMarkersVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarker> &data) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerUpdate.markers.size()) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.markers.insert(idl_Visualization_msgs_InteractiveMarkerUpdate.markers.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeMarkers(const size_t &size) { idl_Visualization_msgs_InteractiveMarkerUpdate.markers.resize(size); }
	inline bool eraseMarkersElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Visualization_msgs_InteractiveMarkerUpdate.markers.size() ) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.markers.erase(idl_Visualization_msgs_InteractiveMarkerUpdate.markers.begin()+pos, idl_Visualization_msgs_InteractiveMarkerUpdate.markers.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearMarkers() { idl_Visualization_msgs_InteractiveMarkerUpdate.markers.clear(); }
	
	// getter and setter for element Poses
	/**
	 * Getter methods for element idl_Visualization_msgs_InteractiveMarkerUpdate.poses of type vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose>
	 */
	inline std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose> getPosesCopy() const { 
		return std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose>(idl_Visualization_msgs_InteractiveMarkerUpdate.poses.begin(), idl_Visualization_msgs_InteractiveMarkerUpdate.poses.end());
	}
	inline ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose getPosesElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose(idl_Visualization_msgs_InteractiveMarkerUpdate.poses[pos]);
	}
	inline size_t getPosesSize() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.poses.size(); }
	inline bool isPosesEmpty() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.poses.empty(); }
	/**
	 * Setter methods for idl_Visualization_msgs_InteractiveMarkerUpdate.poses of type vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose>
	 */
	inline Visualization_msgs_InteractiveMarkerUpdateCore& setPoses(const std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose> &poses) { 
		idl_Visualization_msgs_InteractiveMarkerUpdate.poses.assign(poses.begin(), poses.end());
		return *this;
	}
	inline bool setPosesElemAtPos(const size_t &pos, const ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose &elem) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerUpdate.poses.size()) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.poses[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertPosesVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Visualization_msgs_InteractiveMarkerPose> &data) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerUpdate.poses.size()) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.poses.insert(idl_Visualization_msgs_InteractiveMarkerUpdate.poses.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizePoses(const size_t &size) { idl_Visualization_msgs_InteractiveMarkerUpdate.poses.resize(size); }
	inline bool erasePosesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Visualization_msgs_InteractiveMarkerUpdate.poses.size() ) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.poses.erase(idl_Visualization_msgs_InteractiveMarkerUpdate.poses.begin()+pos, idl_Visualization_msgs_InteractiveMarkerUpdate.poses.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearPoses() { idl_Visualization_msgs_InteractiveMarkerUpdate.poses.clear(); }
	
	// getter and setter for element Erases
	/**
	 * Getter methods for idl_Visualization_msgs_InteractiveMarkerUpdate.erases of type vector<std::string>
	 */
	inline std::vector<std::string> getErasesCopy() const {
		return std::vector<std::string>(idl_Visualization_msgs_InteractiveMarkerUpdate.erases.begin(), idl_Visualization_msgs_InteractiveMarkerUpdate.erases.end());
		//std::transform(idl_Visualization_msgs_InteractiveMarkerUpdate.erases.begin(), idl_Visualization_msgs_InteractiveMarkerUpdate.erases.end(), copy.begin(), getStlString);
		//return copy;
	}
	inline std::string getErasesElemAtPos(const size_t &pos) const { return idl_Visualization_msgs_InteractiveMarkerUpdate.erases[pos].c_str(); }
	inline size_t getErasesSize() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.erases.size(); }
	inline bool isErasesEmpty() const { return idl_Visualization_msgs_InteractiveMarkerUpdate.erases.empty(); }
	/**
	 * Setter methods for idl_Visualization_msgs_InteractiveMarkerUpdate.erases of type vector<std::string>
	 */
	inline Visualization_msgs_InteractiveMarkerUpdateCore& setErases(const std::vector<std::string> &erases) { 
		idl_Visualization_msgs_InteractiveMarkerUpdate.erases = erases;
		//resizeErases(erases.size());
		//std::transform(erases.begin(), erases.end(), idl_Visualization_msgs_InteractiveMarkerUpdate.erases.begin(), getIdlString);
		return *this;
	}
	inline bool setErasesElemAtPos(const size_t &pos, const std::string &elem) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerUpdate.erases.size()) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.erases[pos] = elem.c_str();
			return true;
		}
		return false;
	}
	inline bool insertErasesVectorAtPos(const size_t &pos, const std::vector<std::string> &data) {
		if(pos < idl_Visualization_msgs_InteractiveMarkerUpdate.erases.size()) {
			//std::vector<ACE_CString> copy(data.size());
			//std::transform(data.begin(), data.end(), copy.begin(), getIdlString);
			idl_Visualization_msgs_InteractiveMarkerUpdate.erases.insert(idl_Visualization_msgs_InteractiveMarkerUpdate.erases.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeErases(const size_t &size) { idl_Visualization_msgs_InteractiveMarkerUpdate.erases.resize(size); }
	inline bool eraseErasesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Visualization_msgs_InteractiveMarkerUpdate.erases.size() ) {
			idl_Visualization_msgs_InteractiveMarkerUpdate.erases.erase(idl_Visualization_msgs_InteractiveMarkerUpdate.erases.begin()+pos, idl_Visualization_msgs_InteractiveMarkerUpdate.erases.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearErases() { idl_Visualization_msgs_InteractiveMarkerUpdate.erases.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_VISUALIZATION_MSGS_INTERACTIVEMARKERUPDATE_CORE_H_ */
