//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Visualization_msgs_ImageMarkerACE.hh"
#include <ace/SString.h>
#include "ROSCommon_msgs/Geometry_msgs_PointACE.hh"
#include "CommBasicObjects/CommTimeStampACE.hh"
#include "ROSRos_core/Std_msgs_ColorRGBAACE.hh"
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Visualization_msgs_ImageMarker
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Visualization_msgs_ImageMarker &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element ns
	good_bit = good_bit && cdr << ACE_CString(data.ns.c_str());
	// serialize list-element id
	good_bit = good_bit && cdr.write_long(data.id);
	// serialize list-element type
	good_bit = good_bit && cdr.write_long(data.type);
	// serialize list-element action
	good_bit = good_bit && cdr.write_long(data.action);
	// serialize list-element position
	good_bit = good_bit && cdr << data.position;
	// serialize list-element scale
	good_bit = good_bit && cdr.write_float(data.scale);
	// serialize list-element outline_color
	good_bit = good_bit && cdr << data.outline_color;
	// serialize list-element filled
	good_bit = good_bit && cdr.write_octet(data.filled);
	// serialize list-element fill_color
	good_bit = good_bit && cdr << data.fill_color;
	// serialize list-element lifetime
	good_bit = good_bit && cdr << data.lifetime;
	// serialize list-element points
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.points.size());
	std::vector<ROSCommon_msgsIDL::Geometry_msgs_Point>::const_iterator data_pointsIt;
	for(data_pointsIt=data.points.begin(); data_pointsIt!=data.points.end(); data_pointsIt++) {
		good_bit = good_bit && cdr << *data_pointsIt;
	}
	// serialize list-element outline_colors
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.outline_colors.size());
	std::vector<ROSRos_coreIDL::Std_msgs_ColorRGBA>::const_iterator data_outline_colorsIt;
	for(data_outline_colorsIt=data.outline_colors.begin(); data_outline_colorsIt!=data.outline_colors.end(); data_outline_colorsIt++) {
		good_bit = good_bit && cdr << *data_outline_colorsIt;
	}
	
	return good_bit;
}

// de-serialization operator for element Visualization_msgs_ImageMarker
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Visualization_msgs_ImageMarker &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize string-type element ns
	ACE_CString data_ns_str;
	good_bit = good_bit && cdr >> data_ns_str;
	data.ns = data_ns_str.c_str();
	// deserialize type element id
	good_bit = good_bit && cdr.read_long(data.id);
	// deserialize type element type
	good_bit = good_bit && cdr.read_long(data.type);
	// deserialize type element action
	good_bit = good_bit && cdr.read_long(data.action);
	// deserialize type element position
	good_bit = good_bit && cdr >> data.position;
	// deserialize type element scale
	good_bit = good_bit && cdr.read_float(data.scale);
	// deserialize type element outline_color
	good_bit = good_bit && cdr >> data.outline_color;
	// deserialize type element filled
	good_bit = good_bit && cdr.read_octet(data.filled);
	// deserialize type element fill_color
	good_bit = good_bit && cdr >> data.fill_color;
	// deserialize type element lifetime
	good_bit = good_bit && cdr >> data.lifetime;
	// deserialize list-type element points
	ACE_CDR::ULong data_pointsNbr;
	good_bit = good_bit && cdr >> data_pointsNbr;
	data.points.clear();
	ROSCommon_msgsIDL::Geometry_msgs_Point data_pointsItem;
	for(ACE_CDR::ULong i=0; i<data_pointsNbr; ++i) {
		good_bit = good_bit && cdr >> data_pointsItem;
		data.points.push_back(data_pointsItem);
	}
	// deserialize list-type element outline_colors
	ACE_CDR::ULong data_outline_colorsNbr;
	good_bit = good_bit && cdr >> data_outline_colorsNbr;
	data.outline_colors.clear();
	ROSRos_coreIDL::Std_msgs_ColorRGBA data_outline_colorsItem;
	for(ACE_CDR::ULong i=0; i<data_outline_colorsNbr; ++i) {
		good_bit = good_bit && cdr >> data_outline_colorsItem;
		data.outline_colors.push_back(data_outline_colorsItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject Visualization_msgs_ImageMarker
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Visualization_msgs_ImageMarker &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Visualization_msgs_ImageMarker
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Visualization_msgs_ImageMarker &obj)
{
	return cdr >> obj.set();
}
