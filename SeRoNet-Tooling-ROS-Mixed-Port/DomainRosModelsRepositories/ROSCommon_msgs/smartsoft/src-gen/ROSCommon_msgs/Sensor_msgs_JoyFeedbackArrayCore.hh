//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SENSOR_MSGS_JOYFEEDBACKARRAY_CORE_H_
#define ROSCOMMON_MSGS_SENSOR_MSGS_JOYFEEDBACKARRAY_CORE_H_

#include "ROSCommon_msgs/Sensor_msgs_JoyFeedbackArrayData.hh"
#include "ROSCommon_msgs/Sensor_msgs_JoyFeedback.hh"

#include <iostream>
#include <string>
#include <list>

namespace ROSCommon_msgs {
	
class Sensor_msgs_JoyFeedbackArrayCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Sensor_msgs_JoyFeedbackArray idl_Sensor_msgs_JoyFeedbackArray;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Sensor_msgs_JoyFeedbackArray DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Sensor_msgs_JoyFeedbackArrayCore();
	Sensor_msgs_JoyFeedbackArrayCore(const DATATYPE &data);
	// default destructor
	virtual ~Sensor_msgs_JoyFeedbackArrayCore();
	
	const DATATYPE& get() const { return idl_Sensor_msgs_JoyFeedbackArray; }
	operator const DATATYPE&() const { return idl_Sensor_msgs_JoyFeedbackArray; }
	DATATYPE& set() { return idl_Sensor_msgs_JoyFeedbackArray; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Sensor_msgs_JoyFeedbackArray"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Array
	/**
	 * Getter methods for element idl_Sensor_msgs_JoyFeedbackArray.array of type vector<ROSCommon_msgs::Sensor_msgs_JoyFeedback>
	 */
	inline std::vector<ROSCommon_msgs::Sensor_msgs_JoyFeedback> getArrayCopy() const { 
		return std::vector<ROSCommon_msgs::Sensor_msgs_JoyFeedback>(idl_Sensor_msgs_JoyFeedbackArray.array.begin(), idl_Sensor_msgs_JoyFeedbackArray.array.end());
	}
	inline ROSCommon_msgs::Sensor_msgs_JoyFeedback getArrayElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Sensor_msgs_JoyFeedback(idl_Sensor_msgs_JoyFeedbackArray.array[pos]);
	}
	inline size_t getArraySize() const { return idl_Sensor_msgs_JoyFeedbackArray.array.size(); }
	inline bool isArrayEmpty() const { return idl_Sensor_msgs_JoyFeedbackArray.array.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_JoyFeedbackArray.array of type vector<ROSCommon_msgs::Sensor_msgs_JoyFeedback>
	 */
	inline Sensor_msgs_JoyFeedbackArrayCore& setArray(const std::vector<ROSCommon_msgs::Sensor_msgs_JoyFeedback> &array) { 
		idl_Sensor_msgs_JoyFeedbackArray.array.assign(array.begin(), array.end());
		return *this;
	}
	inline bool setArrayElemAtPos(const size_t &pos, const ROSCommon_msgs::Sensor_msgs_JoyFeedback &elem) {
		if(pos < idl_Sensor_msgs_JoyFeedbackArray.array.size()) {
			idl_Sensor_msgs_JoyFeedbackArray.array[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertArrayVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Sensor_msgs_JoyFeedback> &data) {
		if(pos < idl_Sensor_msgs_JoyFeedbackArray.array.size()) {
			idl_Sensor_msgs_JoyFeedbackArray.array.insert(idl_Sensor_msgs_JoyFeedbackArray.array.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeArray(const size_t &size) { idl_Sensor_msgs_JoyFeedbackArray.array.resize(size); }
	inline bool eraseArrayElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_JoyFeedbackArray.array.size() ) {
			idl_Sensor_msgs_JoyFeedbackArray.array.erase(idl_Sensor_msgs_JoyFeedbackArray.array.begin()+pos, idl_Sensor_msgs_JoyFeedbackArray.array.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearArray() { idl_Sensor_msgs_JoyFeedbackArray.array.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_SENSOR_MSGS_JOYFEEDBACKARRAY_CORE_H_ */
