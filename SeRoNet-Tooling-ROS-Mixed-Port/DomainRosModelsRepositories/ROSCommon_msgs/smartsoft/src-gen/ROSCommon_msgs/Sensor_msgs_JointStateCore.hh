//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SENSOR_MSGS_JOINTSTATE_CORE_H_
#define ROSCOMMON_MSGS_SENSOR_MSGS_JOINTSTATE_CORE_H_

#include "ROSCommon_msgs/Sensor_msgs_JointStateData.hh"
#include "ROSRos_core/Std_msgs_Header.hh"

#include <iostream>
#include <string>
#include <list>
#include <algorithm> // for using std::transform

namespace ROSCommon_msgs {
	
class Sensor_msgs_JointStateCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Sensor_msgs_JointState idl_Sensor_msgs_JointState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Sensor_msgs_JointState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Sensor_msgs_JointStateCore();
	Sensor_msgs_JointStateCore(const DATATYPE &data);
	// default destructor
	virtual ~Sensor_msgs_JointStateCore();
	
	const DATATYPE& get() const { return idl_Sensor_msgs_JointState; }
	operator const DATATYPE&() const { return idl_Sensor_msgs_JointState; }
	DATATYPE& set() { return idl_Sensor_msgs_JointState; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Sensor_msgs_JointState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Header
	inline ROSRos_core::Std_msgs_Header getHeader() const { return ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_JointState.header); }
	inline Sensor_msgs_JointStateCore& setHeader(const ROSRos_core::Std_msgs_Header &header) { idl_Sensor_msgs_JointState.header = header; return *this; }
	
	// getter and setter for element Name
	/**
	 * Getter methods for idl_Sensor_msgs_JointState.name of type vector<std::string>
	 */
	inline std::vector<std::string> getNameCopy() const {
		return std::vector<std::string> (idl_Sensor_msgs_JointState.name.begin(), idl_Sensor_msgs_JointState.name.end());
		//std::transform(idl_Sensor_msgs_JointState.name.begin(), idl_Sensor_msgs_JointState.name.end(), copy.begin(), getStlString);
		//return copy;
	}
	inline std::string getNameElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_JointState.name[pos].c_str(); }
	inline size_t getNameSize() const { return idl_Sensor_msgs_JointState.name.size(); }
	inline bool isNameEmpty() const { return idl_Sensor_msgs_JointState.name.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_JointState.name of type vector<std::string>
	 */
	inline Sensor_msgs_JointStateCore& setName(const std::vector<std::string> &name) { 
		idl_Sensor_msgs_JointState.name.assign(name.begin(), name.end());
		//resizeName(name.size());
		//std::transform(name.begin(), name.end(), idl_Sensor_msgs_JointState.name.begin(), getIdlString);
		return *this;
	}
	inline bool setNameElemAtPos(const size_t &pos, const std::string &elem) {
		if(pos < idl_Sensor_msgs_JointState.name.size()) {
			idl_Sensor_msgs_JointState.name[pos] = elem.c_str();
			return true;
		}
		return false;
	}
	inline bool insertNameVectorAtPos(const size_t &pos, const std::vector<std::string> &data) {
		if(pos < idl_Sensor_msgs_JointState.name.size()) {
			//std::vector<ACE_CString> copy(data.size());
			//std::transform(data.begin(), data.end(), copy.begin(), getIdlString);
			idl_Sensor_msgs_JointState.name.insert(idl_Sensor_msgs_JointState.name.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeName(const size_t &size) { idl_Sensor_msgs_JointState.name.resize(size); }
	inline bool eraseNameElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_JointState.name.size() ) {
			idl_Sensor_msgs_JointState.name.erase(idl_Sensor_msgs_JointState.name.begin()+pos, idl_Sensor_msgs_JointState.name.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearName() { idl_Sensor_msgs_JointState.name.clear(); }
	
	// getter and setter for element Position
	/**
	 * Getter methods for idl_Sensor_msgs_JointState.position of type vector<double>
	 */
	inline std::vector<double>& getPositionRef() { return idl_Sensor_msgs_JointState.position; }
	inline std::vector<double> getPositionCopy() const {
		return std::vector<double>(idl_Sensor_msgs_JointState.position.begin(), idl_Sensor_msgs_JointState.position.end());
	}
	inline double getPositionElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_JointState.position[pos]; }
	inline size_t getPositionSize() const { return idl_Sensor_msgs_JointState.position.size(); }
	inline bool isPositionEmpty() const { return idl_Sensor_msgs_JointState.position.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_JointState.position of type vector<double>
	 */
	inline Sensor_msgs_JointStateCore& setPosition(const std::vector<double> &position) { idl_Sensor_msgs_JointState.position = position; return *this; }
	inline bool setPositionElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_Sensor_msgs_JointState.position.size()) {
			idl_Sensor_msgs_JointState.position[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertPositionVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos < idl_Sensor_msgs_JointState.position.size()) {
			idl_Sensor_msgs_JointState.position.insert(idl_Sensor_msgs_JointState.position.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizePosition(const size_t &size) { idl_Sensor_msgs_JointState.position.resize(size); }
	inline bool erasePositionElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_JointState.position.size() ) {
			idl_Sensor_msgs_JointState.position.erase(idl_Sensor_msgs_JointState.position.begin()+pos, idl_Sensor_msgs_JointState.position.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearPosition() { idl_Sensor_msgs_JointState.position.clear(); }
	
	// getter and setter for element Velocity
	/**
	 * Getter methods for idl_Sensor_msgs_JointState.velocity of type vector<double>
	 */
	inline std::vector<double>& getVelocityRef() { return idl_Sensor_msgs_JointState.velocity; }
	inline std::vector<double> getVelocityCopy() const {
		return std::vector<double>(idl_Sensor_msgs_JointState.velocity.begin(), idl_Sensor_msgs_JointState.velocity.end());
	}
	inline double getVelocityElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_JointState.velocity[pos]; }
	inline size_t getVelocitySize() const { return idl_Sensor_msgs_JointState.velocity.size(); }
	inline bool isVelocityEmpty() const { return idl_Sensor_msgs_JointState.velocity.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_JointState.velocity of type vector<double>
	 */
	inline Sensor_msgs_JointStateCore& setVelocity(const std::vector<double> &velocity) { idl_Sensor_msgs_JointState.velocity = velocity; return *this; }
	inline bool setVelocityElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_Sensor_msgs_JointState.velocity.size()) {
			idl_Sensor_msgs_JointState.velocity[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertVelocityVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos < idl_Sensor_msgs_JointState.velocity.size()) {
			idl_Sensor_msgs_JointState.velocity.insert(idl_Sensor_msgs_JointState.velocity.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeVelocity(const size_t &size) { idl_Sensor_msgs_JointState.velocity.resize(size); }
	inline bool eraseVelocityElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_JointState.velocity.size() ) {
			idl_Sensor_msgs_JointState.velocity.erase(idl_Sensor_msgs_JointState.velocity.begin()+pos, idl_Sensor_msgs_JointState.velocity.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearVelocity() { idl_Sensor_msgs_JointState.velocity.clear(); }
	
	// getter and setter for element Effort
	/**
	 * Getter methods for idl_Sensor_msgs_JointState.effort of type vector<double>
	 */
	inline std::vector<double>& getEffortRef() { return idl_Sensor_msgs_JointState.effort; }
	inline std::vector<double> getEffortCopy() const {
		return std::vector<double>(idl_Sensor_msgs_JointState.effort.begin(), idl_Sensor_msgs_JointState.effort.end());
	}
	inline double getEffortElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_JointState.effort[pos]; }
	inline size_t getEffortSize() const { return idl_Sensor_msgs_JointState.effort.size(); }
	inline bool isEffortEmpty() const { return idl_Sensor_msgs_JointState.effort.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_JointState.effort of type vector<double>
	 */
	inline Sensor_msgs_JointStateCore& setEffort(const std::vector<double> &effort) { idl_Sensor_msgs_JointState.effort = effort; return *this; }
	inline bool setEffortElemAtPos(const size_t &pos, const double &elem) {
		if(pos < idl_Sensor_msgs_JointState.effort.size()) {
			idl_Sensor_msgs_JointState.effort[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertEffortVectorAtPos(const size_t &pos, const std::vector<double> &data) {
		if(pos < idl_Sensor_msgs_JointState.effort.size()) {
			idl_Sensor_msgs_JointState.effort.insert(idl_Sensor_msgs_JointState.effort.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeEffort(const size_t &size) { idl_Sensor_msgs_JointState.effort.resize(size); }
	inline bool eraseEffortElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_JointState.effort.size() ) {
			idl_Sensor_msgs_JointState.effort.erase(idl_Sensor_msgs_JointState.effort.begin()+pos, idl_Sensor_msgs_JointState.effort.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearEffort() { idl_Sensor_msgs_JointState.effort.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_SENSOR_MSGS_JOINTSTATE_CORE_H_ */
