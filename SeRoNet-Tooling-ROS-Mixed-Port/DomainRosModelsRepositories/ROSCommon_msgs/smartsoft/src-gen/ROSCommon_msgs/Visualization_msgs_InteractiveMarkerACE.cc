//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerACE.hh"
#include <ace/SString.h>
#include "ROSCommon_msgs/Geometry_msgs_PoseACE.hh"
#include "ROSCommon_msgs/Visualization_msgs_MenuEntryACE.hh"
#include "ROSCommon_msgs/Visualization_msgs_InteractiveMarkerControlACE.hh"
#include "ROSRos_core/Std_msgs_HeaderACE.hh"

// serialization operator for element Visualization_msgs_InteractiveMarker
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarker &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element header
	good_bit = good_bit && cdr << data.header;
	// serialize list-element pose
	good_bit = good_bit && cdr << data.pose;
	// serialize list-element name
	good_bit = good_bit && cdr << ACE_CString(data.name.c_str());
	// serialize list-element description
	good_bit = good_bit && cdr << ACE_CString(data.description.c_str());
	// serialize list-element scale
	good_bit = good_bit && cdr.write_float(data.scale);
	// serialize list-element menu_entries
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.menu_entries.size());
	std::vector<ROSCommon_msgsIDL::Visualization_msgs_MenuEntry>::const_iterator data_menu_entriesIt;
	for(data_menu_entriesIt=data.menu_entries.begin(); data_menu_entriesIt!=data.menu_entries.end(); data_menu_entriesIt++) {
		good_bit = good_bit && cdr << *data_menu_entriesIt;
	}
	// serialize list-element controls
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.controls.size());
	std::vector<ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarkerControl>::const_iterator data_controlsIt;
	for(data_controlsIt=data.controls.begin(); data_controlsIt!=data.controls.end(); data_controlsIt++) {
		good_bit = good_bit && cdr << *data_controlsIt;
	}
	
	return good_bit;
}

// de-serialization operator for element Visualization_msgs_InteractiveMarker
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarker &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element header
	good_bit = good_bit && cdr >> data.header;
	// deserialize type element pose
	good_bit = good_bit && cdr >> data.pose;
	// deserialize string-type element name
	ACE_CString data_name_str;
	good_bit = good_bit && cdr >> data_name_str;
	data.name = data_name_str.c_str();
	// deserialize string-type element description
	ACE_CString data_description_str;
	good_bit = good_bit && cdr >> data_description_str;
	data.description = data_description_str.c_str();
	// deserialize type element scale
	good_bit = good_bit && cdr.read_float(data.scale);
	// deserialize list-type element menu_entries
	ACE_CDR::ULong data_menu_entriesNbr;
	good_bit = good_bit && cdr >> data_menu_entriesNbr;
	data.menu_entries.clear();
	ROSCommon_msgsIDL::Visualization_msgs_MenuEntry data_menu_entriesItem;
	for(ACE_CDR::ULong i=0; i<data_menu_entriesNbr; ++i) {
		good_bit = good_bit && cdr >> data_menu_entriesItem;
		data.menu_entries.push_back(data_menu_entriesItem);
	}
	// deserialize list-type element controls
	ACE_CDR::ULong data_controlsNbr;
	good_bit = good_bit && cdr >> data_controlsNbr;
	data.controls.clear();
	ROSCommon_msgsIDL::Visualization_msgs_InteractiveMarkerControl data_controlsItem;
	for(ACE_CDR::ULong i=0; i<data_controlsNbr; ++i) {
		good_bit = good_bit && cdr >> data_controlsItem;
		data.controls.push_back(data_controlsItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject Visualization_msgs_InteractiveMarker
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Visualization_msgs_InteractiveMarker &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Visualization_msgs_InteractiveMarker
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Visualization_msgs_InteractiveMarker &obj)
{
	return cdr >> obj.set();
}
