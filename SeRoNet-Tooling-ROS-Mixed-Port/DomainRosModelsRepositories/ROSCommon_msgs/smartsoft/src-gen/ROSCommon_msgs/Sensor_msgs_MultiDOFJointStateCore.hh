//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_SENSOR_MSGS_MULTIDOFJOINTSTATE_CORE_H_
#define ROSCOMMON_MSGS_SENSOR_MSGS_MULTIDOFJOINTSTATE_CORE_H_

#include "ROSCommon_msgs/Sensor_msgs_MultiDOFJointStateData.hh"
#include "ROSCommon_msgs/Geometry_msgs_Transform.hh"
#include "ROSCommon_msgs/Geometry_msgs_Twist.hh"
#include "ROSRos_core/Std_msgs_Header.hh"
#include "ROSCommon_msgs/Geometry_msgs_Wrench.hh"

#include <iostream>
#include <string>
#include <list>
#include <algorithm> // for using std::transform

namespace ROSCommon_msgs {
	
class Sensor_msgs_MultiDOFJointStateCore {
protected:
	// data structure
	ROSCommon_msgsIDL::Sensor_msgs_MultiDOFJointState idl_Sensor_msgs_MultiDOFJointState;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef ROSCommon_msgsIDL::Sensor_msgs_MultiDOFJointState DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	Sensor_msgs_MultiDOFJointStateCore();
	Sensor_msgs_MultiDOFJointStateCore(const DATATYPE &data);
	// default destructor
	virtual ~Sensor_msgs_MultiDOFJointStateCore();
	
	const DATATYPE& get() const { return idl_Sensor_msgs_MultiDOFJointState; }
	operator const DATATYPE&() const { return idl_Sensor_msgs_MultiDOFJointState; }
	DATATYPE& set() { return idl_Sensor_msgs_MultiDOFJointState; }

	static inline std::string identifier(void) { return "ROSCommon_msgs::Sensor_msgs_MultiDOFJointState"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Header
	inline ROSRos_core::Std_msgs_Header getHeader() const { return ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_MultiDOFJointState.header); }
	inline Sensor_msgs_MultiDOFJointStateCore& setHeader(const ROSRos_core::Std_msgs_Header &header) { idl_Sensor_msgs_MultiDOFJointState.header = header; return *this; }
	
	// getter and setter for element Joint_names
	/**
	 * Getter methods for idl_Sensor_msgs_MultiDOFJointState.joint_names of type vector<std::string>
	 */
	inline std::vector<std::string> getJoint_namesCopy() const {
		return std::vector<std::string>(idl_Sensor_msgs_MultiDOFJointState.joint_names.begin(), idl_Sensor_msgs_MultiDOFJointState.joint_names.end());
		//std::transform(idl_Sensor_msgs_MultiDOFJointState.joint_names.begin(), idl_Sensor_msgs_MultiDOFJointState.joint_names.end(), copy.begin(), getStlString);
		//return copy;
	}
	inline std::string getJoint_namesElemAtPos(const size_t &pos) const { return idl_Sensor_msgs_MultiDOFJointState.joint_names[pos].c_str(); }
	inline size_t getJoint_namesSize() const { return idl_Sensor_msgs_MultiDOFJointState.joint_names.size(); }
	inline bool isJoint_namesEmpty() const { return idl_Sensor_msgs_MultiDOFJointState.joint_names.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_MultiDOFJointState.joint_names of type vector<std::string>
	 */
	inline Sensor_msgs_MultiDOFJointStateCore& setJoint_names(const std::vector<std::string> &joint_names) { 
		idl_Sensor_msgs_MultiDOFJointState.joint_names = joint_names;
		//resizeJoint_names(joint_names.size());
		//std::transform(joint_names.begin(), joint_names.end(), idl_Sensor_msgs_MultiDOFJointState.joint_names.begin(), getIdlString);
		return *this;
	}
	inline bool setJoint_namesElemAtPos(const size_t &pos, const std::string &elem) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.joint_names.size()) {
			idl_Sensor_msgs_MultiDOFJointState.joint_names[pos] = elem.c_str();
			return true;
		}
		return false;
	}
	/**inline bool insertJoint_namesVectorAtPos(const size_t &pos, const std::vector<std::string> &data) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.joint_names.size()) {
			std::vector<ACE_CString> copy(data.size());
			std::transform(data.begin(), data.end(), copy.begin(), getIdlString);
			idl_Sensor_msgs_MultiDOFJointState.joint_names.insert(idl_Sensor_msgs_MultiDOFJointState.joint_names.begin()+pos, copy.begin(), copy.end());
			return true;
		}
		return false;
	}*/
	inline void resizeJoint_names(const size_t &size) { idl_Sensor_msgs_MultiDOFJointState.joint_names.resize(size); }
	inline bool eraseJoint_namesElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_MultiDOFJointState.joint_names.size() ) {
			idl_Sensor_msgs_MultiDOFJointState.joint_names.erase(idl_Sensor_msgs_MultiDOFJointState.joint_names.begin()+pos, idl_Sensor_msgs_MultiDOFJointState.joint_names.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearJoint_names() { idl_Sensor_msgs_MultiDOFJointState.joint_names.clear(); }
	
	// getter and setter for element Transforms
	/**
	 * Getter methods for element idl_Sensor_msgs_MultiDOFJointState.transforms of type vector<ROSCommon_msgs::Geometry_msgs_Transform>
	 */
	inline std::vector<ROSCommon_msgs::Geometry_msgs_Transform> getTransformsCopy() const { 
		return std::vector<ROSCommon_msgs::Geometry_msgs_Transform>(idl_Sensor_msgs_MultiDOFJointState.transforms.begin(), idl_Sensor_msgs_MultiDOFJointState.transforms.end());
	}
	inline ROSCommon_msgs::Geometry_msgs_Transform getTransformsElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Geometry_msgs_Transform(idl_Sensor_msgs_MultiDOFJointState.transforms[pos]);
	}
	inline size_t getTransformsSize() const { return idl_Sensor_msgs_MultiDOFJointState.transforms.size(); }
	inline bool isTransformsEmpty() const { return idl_Sensor_msgs_MultiDOFJointState.transforms.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_MultiDOFJointState.transforms of type vector<ROSCommon_msgs::Geometry_msgs_Transform>
	 */
	inline Sensor_msgs_MultiDOFJointStateCore& setTransforms(const std::vector<ROSCommon_msgs::Geometry_msgs_Transform> &transforms) { 
		idl_Sensor_msgs_MultiDOFJointState.transforms.assign(transforms.begin(), transforms.end());
		return *this;
	}
	inline bool setTransformsElemAtPos(const size_t &pos, const ROSCommon_msgs::Geometry_msgs_Transform &elem) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.transforms.size()) {
			idl_Sensor_msgs_MultiDOFJointState.transforms[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertTransformsVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Geometry_msgs_Transform> &data) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.transforms.size()) {
			idl_Sensor_msgs_MultiDOFJointState.transforms.insert(idl_Sensor_msgs_MultiDOFJointState.transforms.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTransforms(const size_t &size) { idl_Sensor_msgs_MultiDOFJointState.transforms.resize(size); }
	inline bool eraseTransformsElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_MultiDOFJointState.transforms.size() ) {
			idl_Sensor_msgs_MultiDOFJointState.transforms.erase(idl_Sensor_msgs_MultiDOFJointState.transforms.begin()+pos, idl_Sensor_msgs_MultiDOFJointState.transforms.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTransforms() { idl_Sensor_msgs_MultiDOFJointState.transforms.clear(); }
	
	// getter and setter for element Twist
	/**
	 * Getter methods for element idl_Sensor_msgs_MultiDOFJointState.twist of type vector<ROSCommon_msgs::Geometry_msgs_Twist>
	 */
	inline std::vector<ROSCommon_msgs::Geometry_msgs_Twist> getTwistCopy() const { 
		return std::vector<ROSCommon_msgs::Geometry_msgs_Twist>(idl_Sensor_msgs_MultiDOFJointState.twist.begin(), idl_Sensor_msgs_MultiDOFJointState.twist.end());
	}
	inline ROSCommon_msgs::Geometry_msgs_Twist getTwistElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Geometry_msgs_Twist(idl_Sensor_msgs_MultiDOFJointState.twist[pos]);
	}
	inline size_t getTwistSize() const { return idl_Sensor_msgs_MultiDOFJointState.twist.size(); }
	inline bool isTwistEmpty() const { return idl_Sensor_msgs_MultiDOFJointState.twist.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_MultiDOFJointState.twist of type vector<ROSCommon_msgs::Geometry_msgs_Twist>
	 */
	inline Sensor_msgs_MultiDOFJointStateCore& setTwist(const std::vector<ROSCommon_msgs::Geometry_msgs_Twist> &twist) { 
		idl_Sensor_msgs_MultiDOFJointState.twist.assign(twist.begin(), twist.end());
		return *this;
	}
	inline bool setTwistElemAtPos(const size_t &pos, const ROSCommon_msgs::Geometry_msgs_Twist &elem) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.twist.size()) {
			idl_Sensor_msgs_MultiDOFJointState.twist[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertTwistVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Geometry_msgs_Twist> &data) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.twist.size()) {
			idl_Sensor_msgs_MultiDOFJointState.twist.insert(idl_Sensor_msgs_MultiDOFJointState.twist.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeTwist(const size_t &size) { idl_Sensor_msgs_MultiDOFJointState.twist.resize(size); }
	inline bool eraseTwistElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_MultiDOFJointState.twist.size() ) {
			idl_Sensor_msgs_MultiDOFJointState.twist.erase(idl_Sensor_msgs_MultiDOFJointState.twist.begin()+pos, idl_Sensor_msgs_MultiDOFJointState.twist.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearTwist() { idl_Sensor_msgs_MultiDOFJointState.twist.clear(); }
	
	// getter and setter for element Wrench
	/**
	 * Getter methods for element idl_Sensor_msgs_MultiDOFJointState.wrench of type vector<ROSCommon_msgs::Geometry_msgs_Wrench>
	 */
	inline std::vector<ROSCommon_msgs::Geometry_msgs_Wrench> getWrenchCopy() const { 
		return std::vector<ROSCommon_msgs::Geometry_msgs_Wrench>(idl_Sensor_msgs_MultiDOFJointState.wrench.begin(), idl_Sensor_msgs_MultiDOFJointState.wrench.end());
	}
	inline ROSCommon_msgs::Geometry_msgs_Wrench getWrenchElemAtPos(const size_t &pos) const {
		return ROSCommon_msgs::Geometry_msgs_Wrench(idl_Sensor_msgs_MultiDOFJointState.wrench[pos]);
	}
	inline size_t getWrenchSize() const { return idl_Sensor_msgs_MultiDOFJointState.wrench.size(); }
	inline bool isWrenchEmpty() const { return idl_Sensor_msgs_MultiDOFJointState.wrench.empty(); }
	/**
	 * Setter methods for idl_Sensor_msgs_MultiDOFJointState.wrench of type vector<ROSCommon_msgs::Geometry_msgs_Wrench>
	 */
	inline Sensor_msgs_MultiDOFJointStateCore& setWrench(const std::vector<ROSCommon_msgs::Geometry_msgs_Wrench> &wrench) { 
		idl_Sensor_msgs_MultiDOFJointState.wrench.assign(wrench.begin(), wrench.end());
		return *this;
	}
	inline bool setWrenchElemAtPos(const size_t &pos, const ROSCommon_msgs::Geometry_msgs_Wrench &elem) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.wrench.size()) {
			idl_Sensor_msgs_MultiDOFJointState.wrench[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertWrenchVectorAtPos(const size_t &pos, const std::vector<ROSCommon_msgs::Geometry_msgs_Wrench> &data) {
		if(pos < idl_Sensor_msgs_MultiDOFJointState.wrench.size()) {
			idl_Sensor_msgs_MultiDOFJointState.wrench.insert(idl_Sensor_msgs_MultiDOFJointState.wrench.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeWrench(const size_t &size) { idl_Sensor_msgs_MultiDOFJointState.wrench.resize(size); }
	inline bool eraseWrenchElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_Sensor_msgs_MultiDOFJointState.wrench.size() ) {
			idl_Sensor_msgs_MultiDOFJointState.wrench.erase(idl_Sensor_msgs_MultiDOFJointState.wrench.begin()+pos, idl_Sensor_msgs_MultiDOFJointState.wrench.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearWrench() { idl_Sensor_msgs_MultiDOFJointState.wrench.clear(); }
};

} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_SENSOR_MSGS_MULTIDOFJOINTSTATE_CORE_H_ */
