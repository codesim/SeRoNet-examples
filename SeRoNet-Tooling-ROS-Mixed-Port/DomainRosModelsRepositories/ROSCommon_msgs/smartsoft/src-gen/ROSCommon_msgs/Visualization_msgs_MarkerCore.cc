//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Visualization_msgs_MarkerCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Visualization_msgs_MarkerACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Visualization_msgs_MarkerCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Visualization_msgs_MarkerCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Visualization_msgs_Marker.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Pose(idl_Visualization_msgs_Marker.pose)
		ROSCommon_msgs::Geometry_msgs_Pose::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Vector3(idl_Visualization_msgs_Marker.scale)
		ROSCommon_msgs::Geometry_msgs_Vector3::getAllHashValues(hashes);
		// get hash value(s) for ROSRos_core::Std_msgs_ColorRGBA(idl_Visualization_msgs_Marker.color)
		ROSRos_core::Std_msgs_ColorRGBA::getAllHashValues(hashes);
		// get hash value(s) for CommBasicObjects::CommTimeStamp(idl_Visualization_msgs_Marker.lifetime)
		CommBasicObjects::CommTimeStamp::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Geometry_msgs_Point(idl_Visualization_msgs_Marker.points)
		ROSCommon_msgs::Geometry_msgs_Point::getAllHashValues(hashes);
		// get hash value(s) for ROSRos_core::Std_msgs_ColorRGBA(idl_Visualization_msgs_Marker.colors)
		ROSRos_core::Std_msgs_ColorRGBA::getAllHashValues(hashes);
	}
	
	void Visualization_msgs_MarkerCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Visualization_msgs_MarkerCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Visualization_msgs_Marker.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Pose(idl_Visualization_msgs_Marker.pose)
		ROSCommon_msgs::Geometry_msgs_Pose::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Vector3(idl_Visualization_msgs_Marker.scale)
		ROSCommon_msgs::Geometry_msgs_Vector3::checkAllHashValues(hashes);
		// check hash value(s) for ROSRos_core::Std_msgs_ColorRGBA(idl_Visualization_msgs_Marker.color)
		ROSRos_core::Std_msgs_ColorRGBA::checkAllHashValues(hashes);
		// check hash value(s) for CommBasicObjects::CommTimeStamp(idl_Visualization_msgs_Marker.lifetime)
		CommBasicObjects::CommTimeStamp::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Geometry_msgs_Point(idl_Visualization_msgs_Marker.points)
		ROSCommon_msgs::Geometry_msgs_Point::checkAllHashValues(hashes);
		// check hash value(s) for ROSRos_core::Std_msgs_ColorRGBA(idl_Visualization_msgs_Marker.colors)
		ROSRos_core::Std_msgs_ColorRGBA::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Visualization_msgs_MarkerCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		boost::hash_combine(seed, std::string(data.ns.c_str()));
		boost::hash_combine(seed, data.id);
		boost::hash_combine(seed, data.type);
		boost::hash_combine(seed, data.action);
		seed += ROSCommon_msgs::Geometry_msgs_Pose::generateDataHash(data.pose);
		seed += ROSCommon_msgs::Geometry_msgs_Vector3::generateDataHash(data.scale);
		seed += ROSRos_core::Std_msgs_ColorRGBA::generateDataHash(data.color);
		seed += CommBasicObjects::CommTimeStamp::generateDataHash(data.lifetime);
		boost::hash_combine(seed, data.frame_locked);
		std::vector<ROSCommon_msgsIDL::Geometry_msgs_Point>::const_iterator data_pointsIt;
		for(data_pointsIt=data.points.begin(); data_pointsIt!=data.points.end(); data_pointsIt++) {
			seed += ROSCommon_msgs::Geometry_msgs_Point::generateDataHash(*data_pointsIt);
		}
		std::vector<ROSRos_coreIDL::Std_msgs_ColorRGBA>::const_iterator data_colorsIt;
		for(data_colorsIt=data.colors.begin(); data_colorsIt!=data.colors.end(); data_colorsIt++) {
			seed += ROSRos_core::Std_msgs_ColorRGBA::generateDataHash(*data_colorsIt);
		}
		boost::hash_combine(seed, std::string(data.text.c_str()));
		boost::hash_combine(seed, std::string(data.mesh_resource.c_str()));
		boost::hash_combine(seed, data.mesh_use_embedded_materials);
		
		return seed;
	}
	#endif
	
	// default constructor
	Visualization_msgs_MarkerCore::Visualization_msgs_MarkerCore()
	:	idl_Visualization_msgs_Marker()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setNs("");
		setId(0);
		setType(0);
		setAction(0);
		setPose(ROSCommon_msgs::Geometry_msgs_Pose());
		setScale(ROSCommon_msgs::Geometry_msgs_Vector3());
		setColor(ROSRos_core::Std_msgs_ColorRGBA());
		setLifetime(CommBasicObjects::CommTimeStamp());
		setFrame_locked(false);
		setPoints(std::vector<ROSCommon_msgs::Geometry_msgs_Point>());
		setColors(std::vector<ROSRos_core::Std_msgs_ColorRGBA>());
		setText("");
		setMesh_resource("");
		setMesh_use_embedded_materials(false);
	}
	
	Visualization_msgs_MarkerCore::Visualization_msgs_MarkerCore(const DATATYPE &data)
	:	idl_Visualization_msgs_Marker(data)
	{  }

	Visualization_msgs_MarkerCore::~Visualization_msgs_MarkerCore()
	{  }
	
	void Visualization_msgs_MarkerCore::to_ostream(std::ostream &os) const
	{
	  os << "Visualization_msgs_Marker(";
	  getHeader().to_ostream(os);
	  os << getNs() << " ";
	  os << getId() << " ";
	  os << getType() << " ";
	  os << getAction() << " ";
	  getPose().to_ostream(os);
	  getScale().to_ostream(os);
	  getColor().to_ostream(os);
	  getLifetime().to_ostream(os);
	  os << getFrame_locked() << " ";
	  std::vector<ROSCommon_msgs::Geometry_msgs_Point>::const_iterator pointsIt;
	  std::vector<ROSCommon_msgs::Geometry_msgs_Point> pointsList = getPointsCopy();
	  for(pointsIt=pointsList.begin(); pointsIt!=pointsList.end(); pointsIt++) {
	  	pointsIt->to_ostream(os);
	  }
	  std::vector<ROSRos_core::Std_msgs_ColorRGBA>::const_iterator colorsIt;
	  std::vector<ROSRos_core::Std_msgs_ColorRGBA> colorsList = getColorsCopy();
	  for(colorsIt=colorsList.begin(); colorsIt!=colorsList.end(); colorsIt++) {
	  	colorsIt->to_ostream(os);
	  }
	  os << getText() << " ";
	  os << getMesh_resource() << " ";
	  os << getMesh_use_embedded_materials() << " ";
	  os << ") ";
	}
	
	// convert to xml stream
	void Visualization_msgs_MarkerCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		os << indent << "<ns>" << getNs() << "</ns>";
		os << indent << "<id>" << getId() << "</id>";
		os << indent << "<type>" << getType() << "</type>";
		os << indent << "<action>" << getAction() << "</action>";
		os << indent << "<pose>";
		getPose().to_xml(os, indent);
		os << indent << "</pose>";
		os << indent << "<scale>";
		getScale().to_xml(os, indent);
		os << indent << "</scale>";
		os << indent << "<color>";
		getColor().to_xml(os, indent);
		os << indent << "</color>";
		os << indent << "<lifetime>";
		getLifetime().to_xml(os, indent);
		os << indent << "</lifetime>";
		os << indent << "<frame_locked>" << getFrame_locked() << "</frame_locked>";
		std::vector<ROSCommon_msgs::Geometry_msgs_Point>::const_iterator pointsIt;
		std::vector<ROSCommon_msgs::Geometry_msgs_Point> pointsList = getPointsCopy();
		counter = 0;
		os << indent << "<pointsList n=\"" << pointsList.size() << "\">";
		for(pointsIt=pointsList.begin(); pointsIt!=pointsList.end(); pointsIt++) {
			os << indent << "<points i=\"" << counter++ << "\">";
			pointsIt->to_xml(os, indent);
			os << indent << "</points>";
		}
		os << indent << "</pointsList>";
		std::vector<ROSRos_core::Std_msgs_ColorRGBA>::const_iterator colorsIt;
		std::vector<ROSRos_core::Std_msgs_ColorRGBA> colorsList = getColorsCopy();
		counter = 0;
		os << indent << "<colorsList n=\"" << colorsList.size() << "\">";
		for(colorsIt=colorsList.begin(); colorsIt!=colorsList.end(); colorsIt++) {
			os << indent << "<colors i=\"" << counter++ << "\">";
			colorsIt->to_xml(os, indent);
			os << indent << "</colors>";
		}
		os << indent << "</colorsList>";
		os << indent << "<text>" << getText() << "</text>";
		os << indent << "<mesh_resource>" << getMesh_resource() << "</mesh_resource>";
		os << indent << "<mesh_use_embedded_materials>" << getMesh_use_embedded_materials() << "</mesh_use_embedded_materials>";
	}
	
	// restore from xml stream
	void Visualization_msgs_MarkerCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_ns("<ns>");
		static const Smart::KnuthMorrisPratt kmp_id("<id>");
		static const Smart::KnuthMorrisPratt kmp_type("<type>");
		static const Smart::KnuthMorrisPratt kmp_action("<action>");
		static const Smart::KnuthMorrisPratt kmp_pose("<pose>");
		static const Smart::KnuthMorrisPratt kmp_scale("<scale>");
		static const Smart::KnuthMorrisPratt kmp_color("<color>");
		static const Smart::KnuthMorrisPratt kmp_lifetime("<lifetime>");
		static const Smart::KnuthMorrisPratt kmp_frame_locked("<frame_locked>");
		static const Smart::KnuthMorrisPratt kmp_pointsList("<pointsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_points("\">");
		static const Smart::KnuthMorrisPratt kmp_colorsList("<colorsList n=\"");
		static const Smart::KnuthMorrisPratt kmp_colors("\">");
		static const Smart::KnuthMorrisPratt kmp_text("<text>");
		static const Smart::KnuthMorrisPratt kmp_mesh_resource("<mesh_resource>");
		static const Smart::KnuthMorrisPratt kmp_mesh_use_embedded_materials("<mesh_use_embedded_materials>");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_ns.search(is)) {
			std::string nsItem;
			is >> nsItem;
			setNs(nsItem);
		}
		if(kmp_id.search(is)) {
			int idItem;
			is >> idItem;
			setId(idItem);
		}
		if(kmp_type.search(is)) {
			int typeItem;
			is >> typeItem;
			setType(typeItem);
		}
		if(kmp_action.search(is)) {
			int actionItem;
			is >> actionItem;
			setAction(actionItem);
		}
		if(kmp_pose.search(is)) {
			ROSCommon_msgs::Geometry_msgs_Pose poseItem;
			poseItem.from_xml(is);
			setPose(poseItem);
		}
		if(kmp_scale.search(is)) {
			ROSCommon_msgs::Geometry_msgs_Vector3 scaleItem;
			scaleItem.from_xml(is);
			setScale(scaleItem);
		}
		if(kmp_color.search(is)) {
			ROSRos_core::Std_msgs_ColorRGBA colorItem;
			colorItem.from_xml(is);
			setColor(colorItem);
		}
		if(kmp_lifetime.search(is)) {
			CommBasicObjects::CommTimeStamp lifetimeItem;
			lifetimeItem.from_xml(is);
			setLifetime(lifetimeItem);
		}
		if(kmp_frame_locked.search(is)) {
			bool frame_lockedItem;
			is >> frame_lockedItem;
			setFrame_locked(frame_lockedItem);
		}
		if(kmp_pointsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSCommon_msgs::Geometry_msgs_Point pointsItem;
			std::vector<ROSCommon_msgs::Geometry_msgs_Point> pointsList;
			kmp_points.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_points.search(is)) {
					pointsItem.from_xml(is);
					pointsList.push_back(pointsItem);
				}
			}
			setPoints(pointsList);
		}
		if(kmp_colorsList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			ROSRos_core::Std_msgs_ColorRGBA colorsItem;
			std::vector<ROSRos_core::Std_msgs_ColorRGBA> colorsList;
			kmp_colors.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_colors.search(is)) {
					colorsItem.from_xml(is);
					colorsList.push_back(colorsItem);
				}
			}
			setColors(colorsList);
		}
		if(kmp_text.search(is)) {
			std::string textItem;
			is >> textItem;
			setText(textItem);
		}
		if(kmp_mesh_resource.search(is)) {
			std::string mesh_resourceItem;
			is >> mesh_resourceItem;
			setMesh_resource(mesh_resourceItem);
		}
		if(kmp_mesh_use_embedded_materials.search(is)) {
			bool mesh_use_embedded_materialsItem;
			is >> mesh_use_embedded_materialsItem;
			setMesh_use_embedded_materials(mesh_use_embedded_materialsItem);
		}
	}
	
	/*
	void Visualization_msgs_MarkerCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Visualization_msgs_MarkerACE.hh)
		cdr << idl_Visualization_msgs_Marker;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Visualization_msgs_Marker);
		cdr << data_hash;
		// std::cout << "Visualization_msgs_MarkerCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Visualization_msgs_MarkerCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Visualization_msgs_MarkerACE.hh)
		cdr >> idl_Visualization_msgs_Marker;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Visualization_msgs_Marker);
		assert(data_hash == own_hash);
		// std::cout << "Visualization_msgs_MarkerCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
