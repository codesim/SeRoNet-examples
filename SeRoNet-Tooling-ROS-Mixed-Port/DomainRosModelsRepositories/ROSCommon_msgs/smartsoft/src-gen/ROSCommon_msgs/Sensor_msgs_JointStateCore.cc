//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_JointStateCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Sensor_msgs_JointStateACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Sensor_msgs_JointStateCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Sensor_msgs_JointStateCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_JointState.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
	}
	
	void Sensor_msgs_JointStateCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Sensor_msgs_JointStateCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_JointState.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Sensor_msgs_JointStateCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		std::vector<ACE_CString>::const_iterator data_nameIt;
		for(data_nameIt=data.name.begin(); data_nameIt!=data.name.end(); data_nameIt++) {
			boost::hash_combine(seed, std::string(data_nameIt->c_str()));
		}
		std::vector<ACE_CDR::Double>::const_iterator data_positionIt;
		for(data_positionIt=data.position.begin(); data_positionIt!=data.position.end(); data_positionIt++) {
			boost::hash_combine(seed, *data_positionIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_velocityIt;
		for(data_velocityIt=data.velocity.begin(); data_velocityIt!=data.velocity.end(); data_velocityIt++) {
			boost::hash_combine(seed, *data_velocityIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_effortIt;
		for(data_effortIt=data.effort.begin(); data_effortIt!=data.effort.end(); data_effortIt++) {
			boost::hash_combine(seed, *data_effortIt);
		}
		
		return seed;
	}
	#endif
	
	// default constructor
	Sensor_msgs_JointStateCore::Sensor_msgs_JointStateCore()
	:	idl_Sensor_msgs_JointState()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setName(std::vector<std::string>());
		setPosition(std::vector<double>());
		setVelocity(std::vector<double>());
		setEffort(std::vector<double>());
	}
	
	Sensor_msgs_JointStateCore::Sensor_msgs_JointStateCore(const DATATYPE &data)
	:	idl_Sensor_msgs_JointState(data)
	{  }

	Sensor_msgs_JointStateCore::~Sensor_msgs_JointStateCore()
	{  }
	
	void Sensor_msgs_JointStateCore::to_ostream(std::ostream &os) const
	{
	  os << "Sensor_msgs_JointState(";
	  getHeader().to_ostream(os);
	  std::vector<std::string>::const_iterator nameIt;
	  std::vector<std::string> nameList = getNameCopy();
	  for(nameIt=nameList.begin(); nameIt!=nameList.end(); nameIt++) {
	  	os << *nameIt << " ";
	  }
	  std::vector<double>::const_iterator positionIt;
	  std::vector<double> positionList = getPositionCopy();
	  for(positionIt=positionList.begin(); positionIt!=positionList.end(); positionIt++) {
	  	os << *positionIt << " ";
	  }
	  std::vector<double>::const_iterator velocityIt;
	  std::vector<double> velocityList = getVelocityCopy();
	  for(velocityIt=velocityList.begin(); velocityIt!=velocityList.end(); velocityIt++) {
	  	os << *velocityIt << " ";
	  }
	  std::vector<double>::const_iterator effortIt;
	  std::vector<double> effortList = getEffortCopy();
	  for(effortIt=effortList.begin(); effortIt!=effortList.end(); effortIt++) {
	  	os << *effortIt << " ";
	  }
	  os << ") ";
	}
	
	// convert to xml stream
	void Sensor_msgs_JointStateCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		std::vector<std::string>::const_iterator nameIt;
		std::vector<std::string> nameList = getNameCopy();
		counter = 0;
		os << indent << "<nameList n=\"" << nameList.size() << "\">";
		for(nameIt=nameList.begin(); nameIt!=nameList.end(); nameIt++) {
			os << indent << "<name i=\"" << counter++ << "\">" << *nameIt << "</name>";
		}
		os << indent << "</nameList>";
		std::vector<double>::const_iterator positionIt;
		std::vector<double> positionList = getPositionCopy();
		counter = 0;
		os << indent << "<positionList n=\"" << positionList.size() << "\">";
		for(positionIt=positionList.begin(); positionIt!=positionList.end(); positionIt++) {
			os << indent << "<position i=\"" << counter++ << "\">" << *positionIt << "</position>";
		}
		os << indent << "</positionList>";
		std::vector<double>::const_iterator velocityIt;
		std::vector<double> velocityList = getVelocityCopy();
		counter = 0;
		os << indent << "<velocityList n=\"" << velocityList.size() << "\">";
		for(velocityIt=velocityList.begin(); velocityIt!=velocityList.end(); velocityIt++) {
			os << indent << "<velocity i=\"" << counter++ << "\">" << *velocityIt << "</velocity>";
		}
		os << indent << "</velocityList>";
		std::vector<double>::const_iterator effortIt;
		std::vector<double> effortList = getEffortCopy();
		counter = 0;
		os << indent << "<effortList n=\"" << effortList.size() << "\">";
		for(effortIt=effortList.begin(); effortIt!=effortList.end(); effortIt++) {
			os << indent << "<effort i=\"" << counter++ << "\">" << *effortIt << "</effort>";
		}
		os << indent << "</effortList>";
	}
	
	// restore from xml stream
	void Sensor_msgs_JointStateCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_nameList("<nameList n=\"");
		static const Smart::KnuthMorrisPratt kmp_name("\">");
		static const Smart::KnuthMorrisPratt kmp_positionList("<positionList n=\"");
		static const Smart::KnuthMorrisPratt kmp_position("\">");
		static const Smart::KnuthMorrisPratt kmp_velocityList("<velocityList n=\"");
		static const Smart::KnuthMorrisPratt kmp_velocity("\">");
		static const Smart::KnuthMorrisPratt kmp_effortList("<effortList n=\"");
		static const Smart::KnuthMorrisPratt kmp_effort("\">");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_nameList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			std::string nameItem;
			std::vector<std::string> nameList;
			kmp_name.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_name.search(is)) {
					is >> nameItem;
					nameList.push_back(nameItem);
				}
			}
			setName(nameList);
		}
		if(kmp_positionList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double positionItem;
			std::vector<double> positionList;
			kmp_position.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_position.search(is)) {
					is >> positionItem;
					positionList.push_back(positionItem);
				}
			}
			setPosition(positionList);
		}
		if(kmp_velocityList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double velocityItem;
			std::vector<double> velocityList;
			kmp_velocity.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_velocity.search(is)) {
					is >> velocityItem;
					velocityList.push_back(velocityItem);
				}
			}
			setVelocity(velocityList);
		}
		if(kmp_effortList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double effortItem;
			std::vector<double> effortList;
			kmp_effort.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_effort.search(is)) {
					is >> effortItem;
					effortList.push_back(effortItem);
				}
			}
			setEffort(effortList);
		}
	}
	
	/*
	void Sensor_msgs_JointStateCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Sensor_msgs_JointStateACE.hh)
		cdr << idl_Sensor_msgs_JointState;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Sensor_msgs_JointState);
		cdr << data_hash;
		// std::cout << "Sensor_msgs_JointStateCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Sensor_msgs_JointStateCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Sensor_msgs_JointStateACE.hh)
		cdr >> idl_Sensor_msgs_JointState;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Sensor_msgs_JointState);
		assert(data_hash == own_hash);
		// std::cout << "Sensor_msgs_JointStateCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
