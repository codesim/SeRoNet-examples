//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Sensor_msgs_CameraInfoCore.hh"

// serialization/deserialization operators
//#include "ROSCommon_msgs/Sensor_msgs_CameraInfoACE.hh"

// include the hash.idl containing the hash constant
#include "hash.hh"
#include <assert.h>
#include <cstring>
#include <iostream>

// SmartUtils used in from_xml method
#include "smartKnuthMorrisPratt.hh"

#ifdef ENABLE_HASH
	#include <boost/functional/hash.hpp>
#endif

namespace ROSCommon_msgs 
{
	const char* Sensor_msgs_CameraInfoCore::getCompiledHash()
	{
		return ROSCommon_msgsIDL::REPO_HASH;
	}
	
	void Sensor_msgs_CameraInfoCore::getAllHashValues(std::list<std::string> &hashes)
	{
		// get own hash value
		hashes.push_back(getCompiledHash());
		// get hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_CameraInfo.header)
		ROSRos_core::Std_msgs_Header::getAllHashValues(hashes);
		// get hash value(s) for ROSCommon_msgs::Sensor_msgs_RegionOfInterest(idl_Sensor_msgs_CameraInfo.roi)
		ROSCommon_msgs::Sensor_msgs_RegionOfInterest::getAllHashValues(hashes);
	}
	
	void Sensor_msgs_CameraInfoCore::checkAllHashValues(std::list<std::string> &hashes)
	{
		// check own hash value
		if (strcmp(getCompiledHash(), hashes.front().c_str()) != 0)
		{
			std::cerr << "###################################################" << std::endl;
			std::cerr << "WARNING: HASHES OF COMMUNICATION OBJECTS MISSMATCH!" << std::endl;
			std::cerr << "Sensor_msgs_CameraInfoCore hash" << std::endl;
			std::cerr << "Expected: " << getCompiledHash() << std::endl;
			std::cerr << "Received: " << hashes.front() << std::endl;
			std::cerr << "###################################################" << std::endl;
		}
		assert(strcmp(getCompiledHash(), hashes.front().c_str()) == 0);
		hashes.pop_front();
		
		// check hash value(s) for ROSRos_core::Std_msgs_Header(idl_Sensor_msgs_CameraInfo.header)
		ROSRos_core::Std_msgs_Header::checkAllHashValues(hashes);
		// check hash value(s) for ROSCommon_msgs::Sensor_msgs_RegionOfInterest(idl_Sensor_msgs_CameraInfo.roi)
		ROSCommon_msgs::Sensor_msgs_RegionOfInterest::checkAllHashValues(hashes);
	}
	
	#ifdef ENABLE_HASH
	size_t Sensor_msgs_CameraInfoCore::generateDataHash(const DATATYPE &data)
	{
		size_t seed = 0;
		
		seed += ROSRos_core::Std_msgs_Header::generateDataHash(data.header);
		boost::hash_combine(seed, data.height);
		boost::hash_combine(seed, data.width);
		boost::hash_combine(seed, std::string(data.distortion_model.c_str()));
		std::vector<ACE_CDR::Double>::const_iterator data_DIt;
		for(data_DIt=data.D.begin(); data_DIt!=data.D.end(); data_DIt++) {
			boost::hash_combine(seed, *data_DIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_KIt;
		for(data_KIt=data.K.begin(); data_KIt!=data.K.end(); data_KIt++) {
			boost::hash_combine(seed, *data_KIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_RIt;
		for(data_RIt=data.R.begin(); data_RIt!=data.R.end(); data_RIt++) {
			boost::hash_combine(seed, *data_RIt);
		}
		std::vector<ACE_CDR::Double>::const_iterator data_PIt;
		for(data_PIt=data.P.begin(); data_PIt!=data.P.end(); data_PIt++) {
			boost::hash_combine(seed, *data_PIt);
		}
		boost::hash_combine(seed, data.binning_x);
		boost::hash_combine(seed, data.binning_y);
		seed += ROSCommon_msgs::Sensor_msgs_RegionOfInterest::generateDataHash(data.roi);
		
		return seed;
	}
	#endif
	
	// default constructor
	Sensor_msgs_CameraInfoCore::Sensor_msgs_CameraInfoCore()
	:	idl_Sensor_msgs_CameraInfo()
	{  
		setHeader(ROSRos_core::Std_msgs_Header());
		setHeight(0);
		setWidth(0);
		setDistortion_model("");
		setD(std::vector<double>());
		setK(std::vector<double>());
		setR(std::vector<double>());
		setP(std::vector<double>());
		setBinning_x(0);
		setBinning_y(0);
		setRoi(ROSCommon_msgs::Sensor_msgs_RegionOfInterest());
	}
	
	Sensor_msgs_CameraInfoCore::Sensor_msgs_CameraInfoCore(const DATATYPE &data)
	:	idl_Sensor_msgs_CameraInfo(data)
	{  }

	Sensor_msgs_CameraInfoCore::~Sensor_msgs_CameraInfoCore()
	{  }
	
	void Sensor_msgs_CameraInfoCore::to_ostream(std::ostream &os) const
	{
	  os << "Sensor_msgs_CameraInfo(";
	  getHeader().to_ostream(os);
	  os << getHeight() << " ";
	  os << getWidth() << " ";
	  os << getDistortion_model() << " ";
	  std::vector<double>::const_iterator DIt;
	  std::vector<double> DList = getDCopy();
	  for(DIt=DList.begin(); DIt!=DList.end(); DIt++) {
	  	os << *DIt << " ";
	  }
	  std::vector<double>::const_iterator KIt;
	  std::vector<double> KList = getKCopy();
	  for(KIt=KList.begin(); KIt!=KList.end(); KIt++) {
	  	os << *KIt << " ";
	  }
	  std::vector<double>::const_iterator RIt;
	  std::vector<double> RList = getRCopy();
	  for(RIt=RList.begin(); RIt!=RList.end(); RIt++) {
	  	os << *RIt << " ";
	  }
	  std::vector<double>::const_iterator PIt;
	  std::vector<double> PList = getPCopy();
	  for(PIt=PList.begin(); PIt!=PList.end(); PIt++) {
	  	os << *PIt << " ";
	  }
	  os << getBinning_x() << " ";
	  os << getBinning_y() << " ";
	  getRoi().to_ostream(os);
	  os << ") ";
	}
	
	// convert to xml stream
	void Sensor_msgs_CameraInfoCore::to_xml(std::ostream &os, const std::string &indent) const {
		size_t counter = 0;
		
		os << indent << "<header>";
		getHeader().to_xml(os, indent);
		os << indent << "</header>";
		os << indent << "<height>" << getHeight() << "</height>";
		os << indent << "<width>" << getWidth() << "</width>";
		os << indent << "<distortion_model>" << getDistortion_model() << "</distortion_model>";
		std::vector<double>::const_iterator DIt;
		std::vector<double> DList = getDCopy();
		counter = 0;
		os << indent << "<DList n=\"" << DList.size() << "\">";
		for(DIt=DList.begin(); DIt!=DList.end(); DIt++) {
			os << indent << "<D i=\"" << counter++ << "\">" << *DIt << "</D>";
		}
		os << indent << "</DList>";
		std::vector<double>::const_iterator KIt;
		std::vector<double> KList = getKCopy();
		counter = 0;
		os << indent << "<KList n=\"" << KList.size() << "\">";
		for(KIt=KList.begin(); KIt!=KList.end(); KIt++) {
			os << indent << "<K i=\"" << counter++ << "\">" << *KIt << "</K>";
		}
		os << indent << "</KList>";
		std::vector<double>::const_iterator RIt;
		std::vector<double> RList = getRCopy();
		counter = 0;
		os << indent << "<RList n=\"" << RList.size() << "\">";
		for(RIt=RList.begin(); RIt!=RList.end(); RIt++) {
			os << indent << "<R i=\"" << counter++ << "\">" << *RIt << "</R>";
		}
		os << indent << "</RList>";
		std::vector<double>::const_iterator PIt;
		std::vector<double> PList = getPCopy();
		counter = 0;
		os << indent << "<PList n=\"" << PList.size() << "\">";
		for(PIt=PList.begin(); PIt!=PList.end(); PIt++) {
			os << indent << "<P i=\"" << counter++ << "\">" << *PIt << "</P>";
		}
		os << indent << "</PList>";
		os << indent << "<binning_x>" << getBinning_x() << "</binning_x>";
		os << indent << "<binning_y>" << getBinning_y() << "</binning_y>";
		os << indent << "<roi>";
		getRoi().to_xml(os, indent);
		os << indent << "</roi>";
	}
	
	// restore from xml stream
	void Sensor_msgs_CameraInfoCore::from_xml(std::istream &is) {
		size_t counter = 0;
		
		static const Smart::KnuthMorrisPratt kmp_header("<header>");
		static const Smart::KnuthMorrisPratt kmp_height("<height>");
		static const Smart::KnuthMorrisPratt kmp_width("<width>");
		static const Smart::KnuthMorrisPratt kmp_distortion_model("<distortion_model>");
		static const Smart::KnuthMorrisPratt kmp_DList("<DList n=\"");
		static const Smart::KnuthMorrisPratt kmp_D("\">");
		static const Smart::KnuthMorrisPratt kmp_KList("<KList n=\"");
		static const Smart::KnuthMorrisPratt kmp_K("\">");
		static const Smart::KnuthMorrisPratt kmp_RList("<RList n=\"");
		static const Smart::KnuthMorrisPratt kmp_R("\">");
		static const Smart::KnuthMorrisPratt kmp_PList("<PList n=\"");
		static const Smart::KnuthMorrisPratt kmp_P("\">");
		static const Smart::KnuthMorrisPratt kmp_binning_x("<binning_x>");
		static const Smart::KnuthMorrisPratt kmp_binning_y("<binning_y>");
		static const Smart::KnuthMorrisPratt kmp_roi("<roi>");
		
		if(kmp_header.search(is)) {
			ROSRos_core::Std_msgs_Header headerItem;
			headerItem.from_xml(is);
			setHeader(headerItem);
		}
		if(kmp_height.search(is)) {
			unsigned int heightItem;
			is >> heightItem;
			setHeight(heightItem);
		}
		if(kmp_width.search(is)) {
			unsigned int widthItem;
			is >> widthItem;
			setWidth(widthItem);
		}
		if(kmp_distortion_model.search(is)) {
			std::string distortion_modelItem;
			is >> distortion_modelItem;
			setDistortion_model(distortion_modelItem);
		}
		if(kmp_DList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double DItem;
			std::vector<double> DList;
			kmp_D.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_D.search(is)) {
					is >> DItem;
					DList.push_back(DItem);
				}
			}
			setD(DList);
		}
		if(kmp_KList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double KItem;
			std::vector<double> KList;
			kmp_K.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_K.search(is)) {
					is >> KItem;
					KList.push_back(KItem);
				}
			}
			setK(KList);
		}
		if(kmp_RList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double RItem;
			std::vector<double> RList;
			kmp_R.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_R.search(is)) {
					is >> RItem;
					RList.push_back(RItem);
				}
			}
			setR(RList);
		}
		if(kmp_PList.search(is)) {
			size_t numberElements;
			is >> numberElements;
			double PItem;
			std::vector<double> PList;
			kmp_P.search(is);
			for(counter=0; counter<numberElements; counter++) {
				if(kmp_P.search(is)) {
					is >> PItem;
					PList.push_back(PItem);
				}
			}
			setP(PList);
		}
		if(kmp_binning_x.search(is)) {
			unsigned int binning_xItem;
			is >> binning_xItem;
			setBinning_x(binning_xItem);
		}
		if(kmp_binning_y.search(is)) {
			unsigned int binning_yItem;
			is >> binning_yItem;
			setBinning_y(binning_yItem);
		}
		if(kmp_roi.search(is)) {
			ROSCommon_msgs::Sensor_msgs_RegionOfInterest roiItem;
			roiItem.from_xml(is);
			setRoi(roiItem);
		}
	}
	
	/*
	void Sensor_msgs_CameraInfoCore::get(ACE_Message_Block *&msg) const
	{
		// start with a default internal buffer size(will automatically grow if needed)
		ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
		
		ROSCommon_msgsIDL::HashList hashes;
		getAllHashValues(hashes);
		cdr << static_cast<ACE_CDR::Long>(hashes.size());
		for(ROSCommon_msgsIDL::HashList::const_iterator it=hashes.begin(); it!=hashes.end(); it++)
		{
			cdr << ACE_CString(it->c_str());
		}
		
		// Here the actual serialization takes place using the OutputCDR serialization operator<<
		// (see Sensor_msgs_CameraInfoACE.hh)
		cdr << idl_Sensor_msgs_CameraInfo;
		
	#ifdef ENABLE_HASH
		ACE_CDR::ULong data_hash = generateDataHash(idl_Sensor_msgs_CameraInfo);
		cdr << data_hash;
		// std::cout << "Sensor_msgs_CameraInfoCore: current data hash: " << data_hash << std::endl;
	#endif
		
		// return a shallow copy of the serialized message 
		// (no data is actually copied, only the internal reference counter is incremented)
		// in order to prevent memory leaks the caller of this get(msg) method must
		// manually free the memory by calling the release() method of the message block msg
		msg = cdr.begin()->duplicate();
	}
	
	void Sensor_msgs_CameraInfoCore::set(const ACE_Message_Block *msg)
	{
		ACE_InputCDR cdr(msg);
	
		ROSCommon_msgsIDL::HashList hashes;
		ACE_CDR::Long hashes_size;
		cdr >> hashes_size;
		for(int i=0; i<hashes_size; ++i) 
		{
			ACE_CString hash;
			cdr >> hash;
			hashes.push_back(hash.c_str());
		}
		checkAllHashValues(hashes);
		
		// Here the actual de-serialization takes place using the InputCDR serialization operator>>
		// (see Sensor_msgs_CameraInfoACE.hh)
		cdr >> idl_Sensor_msgs_CameraInfo;
		
	#ifdef ENABLE_HASH
		ACE_CDR::Long data_hash;
		cdr >> data_hash;
		ACE_CDR::Long own_hash = generateDataHash(idl_Sensor_msgs_CameraInfo);
		assert(data_hash == own_hash);
		// std::cout << "Sensor_msgs_CameraInfoCore: own data hash: " << own_hash << "; received data hash: " << data_hash << std::endl;
	#endif
	}
	*/
} /* namespace ROSCommon_msgs */
