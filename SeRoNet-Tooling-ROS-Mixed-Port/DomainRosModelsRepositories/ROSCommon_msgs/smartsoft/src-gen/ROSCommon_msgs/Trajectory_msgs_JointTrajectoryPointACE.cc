//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "ROSCommon_msgs/Trajectory_msgs_JointTrajectoryPointACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommTimeStampACE.hh"

// serialization operator for element Trajectory_msgs_JointTrajectoryPoint
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgsIDL::Trajectory_msgs_JointTrajectoryPoint &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element positions
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.positions.size());
	good_bit = good_bit && cdr.write_double_array(data.positions.data(), data.positions.size());
	// serialize list-element velocities
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.velocities.size());
	good_bit = good_bit && cdr.write_double_array(data.velocities.data(), data.velocities.size());
	// serialize list-element accelerations
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.accelerations.size());
	good_bit = good_bit && cdr.write_double_array(data.accelerations.data(), data.accelerations.size());
	// serialize list-element effort
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.effort.size());
	good_bit = good_bit && cdr.write_double_array(data.effort.data(), data.effort.size());
	// serialize list-element time_from_start
	good_bit = good_bit && cdr << data.time_from_start;
	
	return good_bit;
}

// de-serialization operator for element Trajectory_msgs_JointTrajectoryPoint
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgsIDL::Trajectory_msgs_JointTrajectoryPoint &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize list-type element positions
	ACE_CDR::ULong data_positionsNbr;
	good_bit = good_bit && cdr >> data_positionsNbr;
	data.positions.resize(data_positionsNbr);
	good_bit = good_bit && cdr.read_double_array(data.positions.data(), data_positionsNbr);
	// deserialize list-type element velocities
	ACE_CDR::ULong data_velocitiesNbr;
	good_bit = good_bit && cdr >> data_velocitiesNbr;
	data.velocities.resize(data_velocitiesNbr);
	good_bit = good_bit && cdr.read_double_array(data.velocities.data(), data_velocitiesNbr);
	// deserialize list-type element accelerations
	ACE_CDR::ULong data_accelerationsNbr;
	good_bit = good_bit && cdr >> data_accelerationsNbr;
	data.accelerations.resize(data_accelerationsNbr);
	good_bit = good_bit && cdr.read_double_array(data.accelerations.data(), data_accelerationsNbr);
	// deserialize list-type element effort
	ACE_CDR::ULong data_effortNbr;
	good_bit = good_bit && cdr >> data_effortNbr;
	data.effort.resize(data_effortNbr);
	good_bit = good_bit && cdr.read_double_array(data.effort.data(), data_effortNbr);
	// deserialize type element time_from_start
	good_bit = good_bit && cdr >> data.time_from_start;
	
	return good_bit;
}

// serialization operator for CommunicationObject Trajectory_msgs_JointTrajectoryPoint
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const ROSCommon_msgs::Trajectory_msgs_JointTrajectoryPoint &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject Trajectory_msgs_JointTrajectoryPoint
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, ROSCommon_msgs::Trajectory_msgs_JointTrajectoryPoint &obj)
{
	return cdr >> obj.set();
}
