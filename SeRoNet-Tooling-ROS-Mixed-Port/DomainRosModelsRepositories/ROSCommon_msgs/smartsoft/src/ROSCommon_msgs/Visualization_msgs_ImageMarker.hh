//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#ifndef ROSCOMMON_MSGS_VISUALIZATION_MSGS_IMAGEMARKER_H_
#define ROSCOMMON_MSGS_VISUALIZATION_MSGS_IMAGEMARKER_H_

#include "ROSCommon_msgs/Visualization_msgs_ImageMarkerCore.hh"

namespace ROSCommon_msgs {
		
class Visualization_msgs_ImageMarker : public Visualization_msgs_ImageMarkerCore {
	public:
		// default constructors
		Visualization_msgs_ImageMarker();
		
		/**
		 * Constructor to set all values.
		 * NOTE that you have to keep this constructor consistent with the model!
		 * Use  at your own choice.
		 *
		 * The preferred way to set values for initialization is:
		 *      CommRepository::MyCommObject obj;
		 *      obj.setX(1).setY(2).setZ(3)...;
		 */
		// Visualization_msgs_ImageMarker(const ROSRos_core::Std_msgs_Header &header, const std::string &ns, const int &id, const int &type, const int &action, const ROSCommon_msgs::Geometry_msgs_Point &position, const float &scale, const ROSRos_core::Std_msgs_ColorRGBA &outline_color, const unsigned char &filled, const ROSRos_core::Std_msgs_ColorRGBA &fill_color, const CommBasicObjects::CommTimeStamp &lifetime, const std::vector<ROSCommon_msgs::Geometry_msgs_Point> &points, const std::vector<ROSRos_core::Std_msgs_ColorRGBA> &outline_colors);
		
		Visualization_msgs_ImageMarker(const Visualization_msgs_ImageMarkerCore &visualization_msgs_ImageMarker);
		Visualization_msgs_ImageMarker(const DATATYPE &visualization_msgs_ImageMarker);
		virtual ~Visualization_msgs_ImageMarker();
		
		// use framework specific getter and setter methods from core (base) class
		using Visualization_msgs_ImageMarkerCore::get;
		using Visualization_msgs_ImageMarkerCore::set;
		
		//
		// feel free to add customized methods here
		//
};

inline std::ostream &operator<<(std::ostream &os, const Visualization_msgs_ImageMarker &co)
{
	co.to_ostream(os);
	return os;
}
	
} /* namespace ROSCommon_msgs */
#endif /* ROSCOMMON_MSGS_VISUALIZATION_MSGS_IMAGEMARKER_H_ */
