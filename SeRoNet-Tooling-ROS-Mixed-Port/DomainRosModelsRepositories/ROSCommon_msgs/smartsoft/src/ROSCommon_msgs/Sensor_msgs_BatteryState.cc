//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "ROSCommon_msgs/Sensor_msgs_BatteryState.hh"

using namespace ROSCommon_msgs;

Sensor_msgs_BatteryState::Sensor_msgs_BatteryState()
:	Sensor_msgs_BatteryStateCore()
{  }


/**
 * Constructor to set all values.
 * NOTE that you have to keep this constructor consistent with the model!
 * Use  at your own choice.
 *
 * The preferred way to set values for initialization is:
 *      CommRepository::MyCommObject obj;
 *      obj.setX(1).setY(2).setZ(3)...;
Sensor_msgs_BatteryState::Sensor_msgs_BatteryState(const ROSRos_core::Std_msgs_Header &header, const float &voltage, const float &current, const float &charge, const float &capacity, const float &design_capacity, const float &percentage, const unsigned char &power_supply_status, const unsigned char &power_supply_health, const unsigned char &power_supply_technology, const bool &present, const std::vector<float> &cell_voltage, const std::string &location, const std::string &serial_number)
:	Sensor_msgs_BatteryStateCore() // base constructor sets default values as defined in the model
{
	setHeader(header);
	setVoltage(voltage);
	setCurrent(current);
	setCharge(charge);
	setCapacity(capacity);
	setDesign_capacity(design_capacity);
	setPercentage(percentage);
	setPower_supply_status(power_supply_status);
	setPower_supply_health(power_supply_health);
	setPower_supply_technology(power_supply_technology);
	setPresent(present);
	setCell_voltage(cell_voltage);
	setLocation(location);
	setSerial_number(serial_number);
}
 */

Sensor_msgs_BatteryState::Sensor_msgs_BatteryState(const Sensor_msgs_BatteryStateCore &sensor_msgs_BatteryState)
:	Sensor_msgs_BatteryStateCore(sensor_msgs_BatteryState)
{  }

Sensor_msgs_BatteryState::Sensor_msgs_BatteryState(const DATATYPE &sensor_msgs_BatteryState)
:	Sensor_msgs_BatteryStateCore(sensor_msgs_BatteryState)
{  }

Sensor_msgs_BatteryState::~Sensor_msgs_BatteryState()
{  }
